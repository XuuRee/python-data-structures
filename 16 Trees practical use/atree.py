#!/usr/bin/python3

# Zadani:
# V tomto prikladu budeme pracovat se stromy aritmetickych vyrazu, pojmenujme
# si je ATree. ATree je binarni strom obsahujici v listech cisla a v jinych
# uzlech operatory. Operatory jsou nasledujici:
#   '+' je binarni plus, ktere secte prvni a druhy argument,
#   '*' je binarni krat, ktere vynasobi prvni a druhy argument, a
#   '-' je unarni minus, ktere vraci zapornou hodnotu jedineho argumentu.
# Arita uzlu je dana aritou operace, podle operace bude mit uzel korektni pocet
# potomku.

# Testy implementovanych funkci generuji stromy v graphvizu.
# Soubory .dot vykreslite napr. na http://www.webgraphviz.com/.


class Node:
    """Trida Node slouzi k reprezentaci uzlu ve strome aritmetickych vyrazu.

    Atributy:
        value       cislo nebo operator
        children    pole potomku, kde potomci jsou serazeni z leva doprava
    """

    def __init__(self):
        self.value = None
        self.children = []


class ATree:
    """Trida ATree slouzi k reprezentaci stromu aritmetickych vyrazu.

    Atributy:
        root    koren stromu aritmetickych vyrazu
    """

    def __init__(self, root=None):
        self.root = root


# Ukol 1. (10 bodu)
# Implementujte funkci eval_atree(tree), ktera vyhodnoti vyraz zadany vstupnim
# stromem 'tree'.
#
# Muzete pocitat s tim, ze na vstupu je korektni ATree obsahujici alespon jeden
# uzel. Napriklad nasledujici strom se vyhodnoti na hodnotu -8.
#           '-'
#            |
#           '*'
#          /   \
#         2    '+'
#             /   \
#            1     3
#
# Strom na vstupu nijak nemodifikujte.

def evaluation(operator, lhs, rhs):
    if operator == '+':
        return lhs + rhs
    if operator == '*':
        return lhs * rhs
    if operator == '-':
        return (-1) * lhs


def is_operator(character):
    return character == "*" or character == "+" or character == "-"


def eval_atree_recursion(node):
    length = len(node.children)
    if length == 0:
        return node.value
    lhs = eval_atree_recursion(node.children[0])
    if length == 2:
        rhs = eval_atree_recursion(node.children[1])
    else:
        rhs = None
    result = evaluation(node.value, lhs, rhs)
    return result


def eval_atree(tree):
    """
    vstup: 'tree' korektni strom typu ATree s alespon jednim uzlem, strom
            nemodifikujte
    vystup: celociselna hodnota, na kterou se vyhodnoti aritmeticky vyraz
            zadany stromem 'tree'
    casova slozitost: O(n), kde 'n' je pocet vrcholu ve strome 'tree'
    """
    return eval_atree_recursion(tree.root)    
    

# Ukol 2. (10 bodu)
# Implementujte funkci constants_to_array(tree), ktera vrati pole vsech
# cisel ve strome 'tree'. Poradi cisel v poli odpovida poradi zleva
# doprava ve vstupnim stromu. Funkce pro strom nize vrati pole [2, 1, 3].
#           '-'
#            |
#           '*'
#          /   \
#         2    '+'
#             /   \
#            1     3
#
# Strom na vstupu nijak nemodifikujte.

def constants_to_array_recursion(node, result):
    if not is_operator(node.value):
        result.append(node.value)
    for item in node.children:
        constants_to_array_recursion(item, result)


def constants_to_array(tree):
    """
    vstup: 'tree' korektni strom typu ATree s alespon jednim uzlem, strom
           nemodifikujte
    vystup: pole cisel stromu 'tree' v poradi zleva doprava
    casova slozitost: O(n), kde 'n' je pocet vrcholu ve strome 'tree'
    """
    result = []
    constants_to_array_recursion(tree.root, result)
    return result


# Ukol 3. (15 bodu)
# Vybudujte strom aritmetickych vyrazu ze vstupniho pole, ktere popisuje vyraz
# v prefixove notaci. Prefixova notace je zapis aritmetickeho vyrazu, kde
# operator predchazi sve operandy. Napr. vyraz 1 + 3 by se prefixove zapsal
# jako + 1 3. V poli jsou ulozeny hodnoty jako retezce operaci (napr.
# '+'), nebo jako cela cisla. Pro vyraz v poli ['-', '*', 2, '+', 1, 3]
# vygenerujete nasledujici strom:
#
#           '-'
#            |
#           '*'
#          /   \
#         2    '+'
#             /   \
#            1     3
#
# V poli dostanete vzdy validni vyraz (se spravnym poctem cisel), pouze ze
# tri zminenych operaci '+', '*' a '-'. Pokud presto chcete testovat, zda je
# v poli cislo, muzete pouzit test type(x) == int. Pripominame, ze operace
# array.pop(0) ma linearni slozitost k delce pole. Za reseni nesplnujici
# zadanou celkovou slozitosti nemuze ziskat plny pocet bodu. Vstupni pole nijak
# nemodifikujte.

def create_node(value):
    node = Node()
    node.value = value
    return node


def get_number_of_ascendents(value):
    if value == "-":
        return 1
    return 2


def build_atree_recursion(array):
    character = array.pop()
    if not is_operator(character):
        return create_node(character)
    if character == "-":
        node = create_node(character)
        lhs = build_atree_recursion(array)
        node.children.append(lhs)
        return node
    node = create_node(character)
    lhs, rhs = build_atree_recursion(array), build_atree_recursion(array)
    node.children.append(lhs)
    node.children.append(rhs)
    return node


def build_atree(array):
    tree = ATree()
    tree.root = build_atree_recursion(list(reversed(array)))
    return tree


"""
def build_atree(array):
    # vstup: 'array' pole obsahujici vyraz v prefixove notaci (obsahuje
             alespon jeden prvek), pole nijak nemodifikujte
    # output: korektni strom typu ATree popisujici stejny vyraz jako 'array'
    # casova slozitost: O(n), kde 'n' je pocet prvku v poli 'array'
    tree = ATree()
    parent = create_node(array[0])
    tree.root, ascendents = parent, get_number_of_ascendents(parent.value)
    for i in range(1, len(array)):
        node = Node()
        node.value = array[i]
        parent.children.append(node)
        ascendents -= 1
        if ascendents == 0:
            ascendents = get_number_of_ascendents(node.value)
            parent = node
    return tree
"""


# Ukol 4. (15 bodu)
# Implementujte funkci simplify_atree(tree), ktera ze zadaneho stromu odstrani
# redundantni uzly podle nasledujicich pravidel. V tomto ukolu upravujte primo
# strom na vstupu.

# Pravidla:
# a) pricitani 0: pokud je jeden z potomku scitani cislo 0, pak tento
#    operand spolu s uzlem scitani odstrante:
#           '-'                 '-'
#            |                   |
#           '+'         ->      '+'
#          /   \               /   \
#         0    '+'            1     3
#             /   \
#            1     3
# b) nasobeni -1: prevedte na unarni minus pro druhy z operandu:
#           '*'                 '-'
#          /   \                 |
#        -1    '+'      ->      '+'
#             /   \            /   \
#            1     3          1     3
# Obe operace funguji symetricky pro oba podstromy.

def simplify_atree(tree):
    """
    vstup: 'tree' korektni strom typu ATree s alespon jednim uzlem
    vystup: nic, upravujte primo vstupni strom
    casova slozitost: O(n), kde 'n' je pocet uzlu ve strome 'tree'
    """
    pass  # TODO


"""
Soubory .dot z testu vykreslite napr. na http://www.webgraphviz.com/.
"""

# kolik se zobrazuje chyb

MaxErrCount = 2

########################################################################
#               Nasleduje kod testu, NEMODIFIKUJTE JEJ                 #
########################################################################


def make_graph(tree, file_name):
    """
    Zde mate k dispozici funkci `make_graph`, ktera vam z `tree` na vstupu
    vygeneruje do souboru `fileName` reprezentaci stromu pro graphviz.
    Graphviz je nastroj, ktery vam umozni vizualizaci datovych struktur,
    coz se hodi predevsim pro ladeni.
    Pro zobrazeni graphvizu muzete vyuzit:
    http://www.webgraphviz.com/
    """

    def make_node(n_id, label):
        f.write("{} [label=\"{}\"]\n".format(n_id, label))

    def make_edge(n1, n2):
        f.write("{} -> {}\n".format(n1, n2))

    def make_graphviz(node):
        make_node(id(node), node.value)
        for n in node.children:
            make_edge(id(node), id(n))
            make_graphviz(n)

    with open(file_name, 'w') as f:
        f.write("digraph Tree {\n")
        f.write("node [color=black, ordering=\"out\"];\n")
        if tree is not None:
            if tree.root is not None:
                make_graphviz(tree.root)
        f.write("}\n")


class Ib002BuiltTrees:
    def __init__(self, array, res=None, constants=None, tree=None,
                 simplified=None):
        self.array = array
        self.result = res
        self.constants = constants
        self.tree = tree
        self.simplified = simplified


def ib002_deserialise_tree(array):
    stack = list(array)
    nodes = []

    while stack:
        n = Node()
        n.value = stack.pop()
        if n.value == '-':
            n.children.append(nodes.pop())
        if n.value in ['+', '*']:
            n1 = nodes.pop()
            n.children.append(nodes.pop())
            n.children.append(n1)
        nodes.append(n)

    t = ATree(nodes.pop())
    return t


def ib002_trees_equality(t1, t2):
    if t1 is not None and t2 is not None:
        return ib002_trees_equality_rec(t1.root, t2.root)


def ib002_trees_equality_rec(n1, n2):
    if n1.value != n2.value or len(n1.children) != len(n2.children):
        return False
    if not n1.children:
        return True
    eq = True
    if n1.value in ['-', '+', '*']:
        eq = eq and ib002_trees_equality_rec(n1.children[0], n2.children[0])
    if n1.value in ['+', '*']:
        eq = eq and ib002_trees_equality_rec(n1.children[1], n2.children[1])
    return eq


testing_dataset = [
    Ib002BuiltTrees([1], 1, [1], [1], [1]),
    Ib002BuiltTrees([0], 0, [0], [0], [0]),
    Ib002BuiltTrees([4], 4, [4], [4], [4]),
    Ib002BuiltTrees([2], 2, [2], [2], [2]),
    Ib002BuiltTrees([3], 3, [3], [3], [3]),
    Ib002BuiltTrees([-3], -3, [-3], [-3], [-3]),
    Ib002BuiltTrees([-1], -1, [-1], [-1], [-1]),
    Ib002BuiltTrees([-2], -2, [-2], [-2], [-2]),
    Ib002BuiltTrees(['-', 0], 0, [0], ['-', 0], ['-', 0]),
    Ib002BuiltTrees(['-', 1], -1, [1], ['-', 1], ['-', 1]),
    Ib002BuiltTrees(['-', 2], -2, [2], ['-', 2], ['-', 2]),
    Ib002BuiltTrees(['-', -1], 1, [-1], ['-', -1], ['-', -1]),
    Ib002BuiltTrees(['-', -2], 2, [-2], ['-', -2], ['-', -2]),
    Ib002BuiltTrees(['*', 0, 1], 0, [0, 1], ['*', 1, 0], ['*', 1, 0]),
    Ib002BuiltTrees(['+', 2, 1], 3, [2, 1], ['+', 1, 2], ['+', 1, 2]),
    Ib002BuiltTrees(['*', 0, -1], 0, [0, -1], ['*', -1, 0], ['-', 0]),
    Ib002BuiltTrees(['+', 3, 4], 7, [3, 4], ['+', 4, 3], ['+', 4, 3]),
    Ib002BuiltTrees(['*', -1, 4], -4, [-1, 4], ['*', 4, -1], ['-', 4]),
    Ib002BuiltTrees(['-', '-', 4], 4, [4], ['-', '-', 4], ['-', '-', 4]),
    Ib002BuiltTrees(['+', -2, 2], 0, [-2, 2], ['+', 2, -2], ['+', 2, -2]),
    Ib002BuiltTrees(['+', -2, 4], 2, [-2, 4], ['+', 4, -2], ['+', 4, -2]),
    Ib002BuiltTrees(['*', 1, -3], -3, [1, -3], ['*', -3, 1], ['*', -3, 1]),
    Ib002BuiltTrees(['*', -3, 3], -9, [-3, 3], ['*', 3, -3], ['*', 3, -3]),
    Ib002BuiltTrees(['-', '-', -1], -1, [-1], ['-', '-', -1], ['-', '-', -1]),
    Ib002BuiltTrees(['+', -3, -3], -6, [-3, -3], ['+', -3, -3], ['+', -3, -3]),
    Ib002BuiltTrees(['+', 3, '-', 3], 0, [3, 3], ['+', '-', 3, 3],
                    ['+', '-', 3, 3]),
    Ib002BuiltTrees(['*', 4, '-', 4], -16, [4, 4], ['*', '-', 4, 4],
                    ['*', '-', 4, 4]),
    Ib002BuiltTrees(['+', '-', -1, 3], 4, [-1, 3], ['+', 3, '-', -1],
                    ['+', 3, '-', -1]),
    Ib002BuiltTrees(['+', 3, '-', -2], 5, [3, -2], ['+', '-', -2, 3],
                    ['+', '-', -2, 3]),
    Ib002BuiltTrees(['-', '-', '-', -1], 1, [-1], ['-', '-', '-', -1],
                    ['-', '-', '-', -1]),
    Ib002BuiltTrees(['*', '+', 1, 2, 3], 9, [1, 2, 3], ['*', 3, '+', 2, 1],
                    ['*', 3, '+', 2, 1]),
    Ib002BuiltTrees(['+', 1, '*', 2, -1], -1, [1, 2, -1], ['+', '*', -1, 2, 1],
                    ['+', '-', 2, 1]),
    Ib002BuiltTrees(['-', '*', '-', 3, 1], 3, [3, 1], ['-', '*', 1, '-', 3],
                    ['-', '*', 1, '-', 3]),
    Ib002BuiltTrees(['-', '*', -2, '-', 2], -4, [-2, 2],
                    ['-', '*', '-', 2, -2], ['-', '*', '-', 2, -2]),
    Ib002BuiltTrees(['-', '+', '-', '-', -3, 0], 3, [-3, 0],
                    ['-', '+', 0, '-', '-', -3], ['-', '-', '-', -3]),
    Ib002BuiltTrees(['*', '-', '-', '-', 0, 0], 0, [0, 0],
                    ['*', 0, '-', '-', '-', 0], ['*', 0, '-', '-', '-', 0]),
    Ib002BuiltTrees(['-', '*', -3, '*', 1, 0], 0, [-3, 1, 0],
                    ['-', '*', '*', 0, 1, -3], ['-', '*', '*', 0, 1, -3]),
    Ib002BuiltTrees(['-', '+', '-', -3, '-', 1], -2, [-3, 1],
                    ['-', '+', '-', 1, '-', -3], ['-', '+', '-', 1, '-', -3]),
    Ib002BuiltTrees(['-', '-', '+', '+', 3, 0, -1], 2, [3, 0, -1],
                    ['-', '-', '+', -1, '+', 0, 3], ['-', '-', '+', -1, 3]),
    Ib002BuiltTrees(['-', '-', '*', -2, '-', -3], -6, [-2, -3],
                    ['-', '-', '*', '-', -3, -2],
                    ['-', '-', '*', '-', -3, -2]),
    Ib002BuiltTrees(['+', '+', '+', 1, 2, 3, 4], 10, [1, 2, 3, 4],
                    ['+', 4, '+', 3, '+', 2, 1], ['+', 4, '+', 3, '+', 2, 1]),
    Ib002BuiltTrees(['+', '+', 1, 2, '+', 3, 4], 10, [1, 2, 3, 4],
                    ['+', '+', 4, 3, '+', 2, 1], ['+', '+', 4, 3, '+', 2, 1]),
    Ib002BuiltTrees(['*', '*', '*', 1, 2, 3, 4], 24, [1, 2, 3, 4],
                    ['*', 4, '*', 3, '*', 2, 1], ['*', 4, '*', 3, '*', 2, 1]),
    Ib002BuiltTrees(['*', 1, '*', 2, '*', 3, 4], 24, [1, 2, 3, 4],
                    ['*', '*', '*', 4, 3, 2, 1], ['*', '*', '*', 4, 3, 2, 1]),
    Ib002BuiltTrees(['+', 0, '+', 0, '+', 0, '+', 2, 3], 5, [0, 0, 0, 2, 3],
                    ['+', '+', '+', '+', 3, 2, 0, 0, 0], ['+', 3, 2]),
    Ib002BuiltTrees(['+', 4, '-', '+', '+', 0, -1, 0], 5, [4, 0, -1, 0],
                    ['+', '-', '+', 0, '+', -1, 0, 4], ['+', '-', -1, 4]),
    Ib002BuiltTrees(['*', 4, '*', -3, '*', 1, 0], 0, [4, -3, 1, 0],
                    ['*', '*', '*', 0, 1, -3, 4],
                    ['*', '*', '*', 0, 1, -3, 4]),
    Ib002BuiltTrees(['+', '-', '*', 0, 2, '-', 2], -2, [0, 2, 2],
                    ['+', '-', 2, '-', '*', 2, 0],
                    ['+', '-', 2, '-', '*', 2, 0]),
    Ib002BuiltTrees(['-', '+', 3, '-', '*', -1, 2], -5, [3, -1, 2],
                    ['-', '+', '-', '*', 2, -1, 3],
                    ['-', '+', '-', '-', 2, 3]),
    Ib002BuiltTrees(['+', '-', '*', '-', 3, -2, 1], -5, [3, -2, 1],
                    ['+', 1, '-', '*', -2, '-', 3],
                    ['+', 1, '-', '*', -2, '-', 3]),
    Ib002BuiltTrees(['*', -1, '+', 0, '*', -1, '+', 2, 3], 5,
                    [-1, 0, -1, 2, 3], ['*', '+', '*', '+', 3, 2, -1, 0, -1],
                    ['-', '-', '+', 3, 2]),
    Ib002BuiltTrees(['*', '+', '-', 2, '-', 1, '-', -3], -9, [2, 1, -3],
                    ['*', '-', -3, '+', '-', 1, '-', 2],
                    ['*', '-', -3, '+', '-', 1, '-', 2]),
    Ib002BuiltTrees(['+', '-', '+', '-', -2, -2, '-', 3], -3, [-2, -2, 3],
                    ['+', '-', 3, '-', '+', -2, '-', -2],
                    ['+', '-', 3, '-', '+', -2, '-', -2]),
    Ib002BuiltTrees(['-', '*', 5, '*', '-', 2, '+', 1, 1], 20, [5, 2, 1, 1],
                    ['-', '*', '*', '+', 1, 1, '-', 2, 5],
                    ['-', '*', '*', '+', 1, 1, '-', 2, 5]),
    Ib002BuiltTrees(['+', '*', '-', '+', 3, '-', 3, -3, -3], -3,
                    [3, 3, -3, -3], ['+', -3, '*', -3, '-', '+', '-', 3, 3],
                    ['+', -3, '*', -3, '-', '+', '-', 3, 3]),
    Ib002BuiltTrees(['+', '-', '*', -2, '-', 0, '+', 1, -3], -2,
                    [-2, 0, 1, -3], ['+', '+', -3, 1, '-', '*', '-', 0, -2],
                    ['+', '+', -3, 1, '-', '*', '-', 0, -2]),
    Ib002BuiltTrees(['-', '+', '-', '+', '-', '-', -1, 3, -2], 4, [-1, 3, -2],
                    ['-', '+', -2, '-', '+', 3, '-', '-', -1],
                    ['-', '+', -2, '-', '+', 3, '-', '-', -1]),
    Ib002BuiltTrees(['-', '+', '+', -2, '*', 1, '-', -3, -2], 1,
                    [-2, 1, -3, -2], ['-', '+', -2, '+', '*', '-', -3, 1, -2],
                    ['-', '+', -2, '+', '*', '-', -3, 1, -2]),
    Ib002BuiltTrees(['*', '-', 3, '-', '-', '*', '-', 3, '+', 0, '-', 0], 0,
                    [3, 3, 0, 0],
                    ['*', '-', '-', '*', '+', '-', 0, 0, '-', 3, '-', 3],
                    ['*', '-', '-', '*', '-', 0, '-', 3, '-', 3]),
    Ib002BuiltTrees(['-', '+', '*', '-', '-', '+', -3, 2, '-', 1, -2], 1,
                    [-3, 2, 1, -2],
                    ['-', '+', -2, '*', '-', 1, '-', '-', '+', 2, -3],
                    ['-', '+', -2, '*', '-', 1, '-', '-', '+', 2, -3]),
    Ib002BuiltTrees(['*', '-', -1, '*', 2, '-', '+', '*', -3, 0, '+', 0, 0], 0,
                    [-1, 2, -3, 0, 0, 0],
                    ['*', '*', '-', '+', '+', 0, 0, '*', 0, -3, 2, '-', -1],
                    ['*', '*', '-', '*', 0, -3, 2, '-', -1]),
    Ib002BuiltTrees(['-', '-', '+', '*', -3, '-', '+', '-', '-', -2, 0, -1],
                    -7, [-3, -2, 0, -1],
                    ['-', '-', '+', -1, '*', '-', '+', 0, '-', '-', -2, -3],
                    ['-', '-', '+', -1, '*', '-', '-', '-', -2, -3]),
    Ib002BuiltTrees(
        ['+', -3, '+', 2, '*', '+', 0, '-', '*', '-', '-', 0, 4, 3], -1,
        [-3, 2, 0, 0, 4, 3],
        ['+', '+', '*', 3, '+', '-', '*', 4, '-', '-', 0, 0, 2, -3],
        ['+', '+', '*', 3, '-', '*', 4, '-', '-', 0, 2, -3]),
    Ib002BuiltTrees(
        ['+', 1, '*', '-', '*', '+', -2, '*', '-', 3, '-', 2, -3, -3], -35,
        [1, -2, 3, 2, -3, -3],
        ['+', '*', -3, '-', '*', -3, '+', '*', '-', 2, '-', 3, -2, 1],
        ['+', '*', -3, '-', '*', -3, '+', '*', '-', 2, '-', 3, -2, 1]),
    Ib002BuiltTrees(
        ['*', '+', '+', '+', 2, '+', '-', '+', 4, 0, '-', '-', 2, '*', -3, 4,
         -1, -3], 39, [2, 4, 0, 2, -3, 4, -1, -3],
        ['*', -3, '+', -1, '+', '*', 4, -3, '+', '+', '-', '-', 2, '-', '+', 0,
         4, 2],
        ['*', -3, '+', -1, '+', '*', 4, -3, '+', '+', '-', '-', 2, '-', 4, 2]),
    Ib002BuiltTrees(
        ['-', '+', '*', '*', -1, '+', '*', '-', '*', -3, '-', '-', 3, '*', -1,
         3, '-', 0, -3, 0], 81, [-1, -3, 3, -1, 3, 0, -3, 0],
        ['-', '+', 0, '*', -3, '*', '+', '-', 0, '*', '*', 3, -1, '-', '*',
         '-', '-', 3, -3, -1],
        ['-', '*', -3, '-', '+', '-', 0, '*', '-', 3, '-', '*', '-', '-', 3,
         -3]),
    Ib002BuiltTrees(
        ['*', '+', '*', 1, '+', '-', 3, 4, '*', '*', '*', '-', '+', '-', '-',
         2, -2, 2, -1, '*', 2, '*', '-', -3, '-', -2, 2], 2,
        [1, 3, 4, 2, -2, 2, -1, 2, -3, -2, 2],
        ['*', 2, '+', '*', '*', '*', '-', -2, '-', -3, 2, '*', -1, '*', 2, '-',
         '+', -2, '-', '-', 2, '*', '+', 4, '-', 3, 1],
        ['*', 2, '+', '*', '*', '*', '-', -2, '-', -3, 2, '-', '*', 2, '-',
         '+', -2, '-', '-', 2, '*', '+', 4, '-', 3, 1]),
    Ib002BuiltTrees(
        ['+', '-', '+', '+', -1, '*', '+', '-', '-', -2, '*', '+', -2, '+', 1,
         '-', 2, '-', '*', 2, -1, '+', '-', '-', 3, 1, -2, '-', 0], 35,
        [-1, -2, -2, 1, 2, 2, -1, 3, 1, -2, 0],
        ['+', '-', 0, '-', '+', -2, '+', '*', '+', 1, '-', '-', 3, '+', '*',
         '-', '*', -1, 2, '+', '+', '-', 2, 1, -2, '-', '-', -2, -1],
        ['+', '-', 0, '-', '+', -2, '+', '*', '+', 1, '-', '-', 3, '+', '*',
         '-', '-', 2, '+', '+', '-', 2, 1, -2, '-', '-', -2, -1]),
    Ib002BuiltTrees(
        ['*', 0, '-', '*', '+', -2, '-', '-', '-', '-', 3, '*', '+', '*', '-',
         '-', '-', '*', '-', 3, '-', '+', '-', '-', -3, 2, -1, -1, 4], 0,
        [0, -2, 3, 3, -3, 2, -1, -1, 4],
        ['*', '-', '*', '*', 4, '+', -1, '*', -1, '-', '-', '-', '*', '-', '+',
         2, '-', '-', -3, '-', 3, '+', '-', '-', '-', '-', 3, -2, 0],
        ['*', '-', '*', '*', 4, '+', -1, '-', '-', '-', '-', '*', '-', '+', 2,
         '-', '-', -3, '-', 3, '+', '-', '-', '-', '-', 3, -2, 0]),
    Ib002BuiltTrees(
        ['-', '*', '*', '-', '*', '+', '+', '-', '-', '-', '+', 0, '*', '+',
         '-', 4, -3, 0, 0, '-', '+', '-', '-', '+', '+', 3, 0, 0, -3, -1, 1,
         2], 0, [0, 4, -3, 0, 0, 3, 0, 0, -3, -1, 1, 2],
        ['-', '*', 2, '*', 1, '-', '*', -1, '+', '-', '+', -3, '-', '-', '+',
         0, '+', 0, 3, '+', 0, '-', '-', '-', '+', '*', 0, '+', -3, '-', 4, 0],
        ['-', '*', 2, '*', 1, '-', '-', '+', '-', '+', -3, '-', '-', 3, '-',
         '-', '-', '*', 0, '+', -3, '-', 4]),
    Ib002BuiltTrees(
        ['-', '+', 3, '-', '+', '-', '+', '+', '-', -1, '*', '*', 1, '+', '+',
         '*', '-', 4, '-', '-', 3, 2, '-', '+', '-', '-', 1, 0, 0, -2, 3], 1,
        [3, -1, 1, 4, 3, 2, 1, 0, 0, -2, 3],
        ['-', '+', '-', '+', 3, '-', '+', -2, '+', '*', 0, '*', '+', '-', '+',
         0, '-', '-', 1, '+', 2, '*', '-', '-', 3, '-', 4, 1, '-', -1, 3],
        ['-', '+', '-', '+', 3, '-', '+', -2, '+', '*', 0, '*', '+', '-', '-',
         '-', 1, '+', 2, '*', '-', '-', 3, '-', 4, 1, '-', -1, 3]),
    Ib002BuiltTrees(
        ['+', '*', '-', '+', '+', '-', -3, '-', '+', '*', '-', '+', '-', '-',
         '-', '+', '+', '-', '-', 2, '-', 2, '-', 4, -2, -2, 1, 1, 3, 2], 5,
        [-3, 2, 2, 4, -2, -2, 1, 1, 3, 2],
        ['+', 2, '*', 3, '-', '+', 1, '+', '-', '+', 1, '*', -2, '-', '+', -2,
         '-', '-', '-', '+', '-', 4, '+', '-', 2, '-', '-', 2, '-', -3],
        ['+', 2, '*', 3, '-', '+', 1, '+', '-', '+', 1, '*', -2, '-', '+', -2,
         '-', '-', '-', '+', '-', 4, '+', '-', 2, '-', '-', 2, '-', -3]),
    Ib002BuiltTrees(
        ['*', '*', '*', '+', '-', '-', '+', '+', -2, '*', '*', '+', 4, '-',
         '+', '-', '-', '-', '-', '-', '-', -1, '-', 2, 1, 4, 2, 0, -1, 4, -1],
        112, [-2, 4, -1, 2, 1, 4, 2, 0, -1, 4, -1],
        ['*', -1, '*', 4, '*', -1, '+', 0, '-', '-', '+', 2, '+', '*', 4, '*',
         1, '+', '-', '+', '-', 2, '-', '-', '-', '-', '-', '-', -1, 4, -2],
        ['-', '*', 4, '-', '-', '-', '+', 2, '+', '*', 4, '*', 1, '+', '-',
         '+', '-', 2, '-', '-', '-', '-', '-', '-', -1, 4, -2]),
    Ib002BuiltTrees(
        ['+', '+', '-', -2, 2, '+', '-', '-', '-', '-', '-', '*', '+', '*',
         '-', -3, '*', '-', '+', '-', -2, '*', '+', '-', -2, 0, -2, 0, 0, 0,
         2], 6, [-2, 2, -3, -2, -2, 0, -2, 0, 0, 0, 2],
        ['+', '+', 2, '-', '-', '-', '-', '-', '*', 0, '+', 0, '*', '*', 0,
         '-', '+', '*', -2, '+', 0, '-', -2, '-', -2, '-', -3, '+', 2, '-',
         -2],
        ['+', '+', 2, '-', '-', '-', '-', '-', '*', 0, '*', '*', 0, '-', '+',
         '*', -2, '-', -2, '-', -2, '-', -3, '+', 2, '-', -2]),
    Ib002BuiltTrees(
        ['+', '+', '*', '*', 3, '-', '*', '-', -3, '-', 2, 4, '*', '-', -3,
         '-', '-', -3, '-', '-', '*', '*', '-', 2, '-', 4, '-', '+', -3, 2],
        71, [3, -3, 2, 4, -3, -3, 2, 4, -3, 2],
        ['+', '-', '-', '*', '-', '+', 2, -3, '*', '-', 4, '-', 2, '+', '*',
         '-', '-', -3, '-', -3, '*', 4, '*', '-', '*', '-', 2, '-', -3, 3],
        ['+', '-', '-', '*', '-', '+', 2, -3, '*', '-', 4, '-', 2, '+', '*',
         '-', '-', -3, '-', -3, '*', 4, '*', '-', '*', '-', 2, '-', -3, 3]),
    Ib002BuiltTrees(
        ['-', '-', '*', '*', 0, '-', '+', '*', '-', '*', '-', -1, 1, '+', '-',
         '-', '*', '-', '-', '+', '*', '-', '*', 1, 3, -3, 4, 0, 3, 1, 3], 0,
        [0, -1, 1, 1, 3, -3, 4, 0, 3, 1, 3],
        ['-', '-', '*', 3, '*', '-', '+', 1, '*', '+', 3, '-', '-', '*', 0,
         '-', '-', '+', 4, '*', -3, '-', '*', 3, 1, '-', '*', 1, '-', -1, 0],
        ['-', '-', '*', 3, '*', '-', '+', 1, '*', '+', 3, '-', '-', '*', 0,
         '-', '-', '+', 4, '*', -3, '-', '*', 3, 1, '-', '*', 1, '-', -1, 0]),
    Ib002BuiltTrees(
        ['+', '+', -2, '+', '-', '-', '*', '-', '-', '+', '-', '*', '+', '*',
         '+', 0, '-', '-', '-', -3, '-', '*', 4, 1, '-', 0, 0, 2, -2, -2, 1],
        -7, [-2, 0, -3, 4, 1, 0, 0, 2, -2, -2, 1],
        ['+', 1, '+', '+', -2, '-', '-', '*', -2, '-', '-', '+', 2, '-', '*',
         0, '+', '-', 0, '*', '-', '*', 1, 4, '+', '-', '-', '-', -3, 0, -2],
        ['+', 1, '+', '+', -2, '-', '-', '*', -2, '-', '-', '+', 2, '-', '*',
         0, '+', '-', 0, '*', '-', '*', 1, 4, '-', '-', '-', -3, -2]),
    Ib002BuiltTrees(
        ['*', 0, '+', '*', '+', '-', '-', -1, '+', -2, '*', '*', '-', '+', '-',
         '+', 1, '-', '*', '-', 3, -3, 2, 1, '+', -3, -1, '-', -1, -1], 0,
        [0, -1, -2, 1, 3, -3, 2, 1, -3, -1, -1, -1],
        ['*', '+', -1, '*', '-', -1, '+', '+', '*', '+', -1, -3, '*', 1, '-',
         '+', 2, '-', '+', '-', '*', -3, '-', 3, 1, -2, '-', '-', -1, 0],
        ['*', '+', -1, '*', '-', -1, '+', '+', '*', '+', -1, -3, '*', 1, '-',
         '+', 2, '-', '+', '-', '*', -3, '-', 3, 1, -2, '-', '-', -1, 0]),
    Ib002BuiltTrees(
        ['+', '-', '-', -2, '*', '-', '+', '+', '+', 0, '+', 2, '-', '-', '-',
         1, '+', '*', '*', '-', -2, -1, '+', -2, 1, '-', '-', '+', 0, 1, 2, 3],
        -20, [-2, 0, 2, 1, -2, -1, -2, 1, 0, 1, 2, 3],
        ['+', '*', 3, '-', '+', 2, '+', '+', '-', '-', '+', 1, 0, '*', '+', 1,
         -2, '*', -1, '-', -2, '+', '+', '-', '-', '-', 1, 2, 0, '-', '-', -2],
        ['+', '*', 3, '-', '+', 2, '+', '+', '-', '-', 1, '*', '+', 1, -2, '-',
         '-', -2, '+', '-', '-', '-', 1, 2, '-', '-', -2]),
    Ib002BuiltTrees(
        ['+', '-', '+', '*', -2, 0, '+', '+', 3, '-', '*', '-', 2, '-', '-',
         '-', -2, 4, '+', '-', '+', 0, '+', '-', '-', '+', '+', 3, 3, 4, 2, 4],
        -19, [-2, 0, 3, 2, -2, 4, 0, 3, 3, 4, 2, 4],
        ['+', '+', 4, '-', '+', '+', 2, '-', '-', '+', 4, '+', 3, 3, 0, '-',
         '+', '+', 4, '+', '-', '*', '-', '-', '-', -2, '-', 2, 3, '*', 0, -2],
        ['+', '+', 4, '-', '+', 2, '-', '-', '+', 4, '+', 3, 3, '-', '+', '+',
         4, '+', '-', '*', '-', '-', '-', -2, '-', 2, 3, '*', 0, -2]),
    Ib002BuiltTrees(
        ['*', '+', '-', '+', -1, 2, '+', '*', '-', '+', 0, '-', '+', -1, '-',
         '+', 0, '+', '-', '-', '+', '-', '+', '*', '*', -1, 3, 2, 0, 0, 2, 0,
         4, -3], -9, [-1, 2, 0, -1, 0, -1, 3, 2, 0, 0, 2, 0, 4, -3],
        ['*', -3, '+', '+', 4, '*', 0, '-', '+', '-', '+', '-', '+', '+', 2,
         '-', '-', '+', 0, '-', '+', 0, '*', 2, '*', 3, -1, 0, -1, 0, '-', '+',
         2, -1],
        ['*', -3, '+', '+', 4, '*', 0, '-', '-', '+', '-', '+', 2, '-', '-',
         '-', '*', 2, '-', 3, -1, '-', '+', 2, -1]),
    Ib002BuiltTrees(
        ['*', 1, '*', '-', '+', '*', '-', '+', '+', -3, '-', '-', -2, 1, '-',
         '-', '-', '-', '*', '*', '-', '*', '*', '-', -1, -2, -1, -1, 1, 1, 1],
        -9, [1, -3, -2, 1, -1, -2, -1, -1, 1, 1, 1],
        ['*', '*', 1, '-', '+', 1, '*', '-', '-', '-', '-', '*', 1, '*', -1,
         '-', '*', -1, '*', -2, '-', -1, '-', '+', 1, '+', '-', '-', -2, -3,
         1],
        ['*', '*', 1, '-', '+', 1, '*', '-', '-', '-', '-', '*', 1, '-', '-',
         '-', '*', -2, '-', -1, '-', '+', 1, '+', '-', '-', -2, -3, 1]),
    Ib002BuiltTrees(
        ['+', '+', -2, '*', '-', '*', '*', '*', 3, '-', '-', '+', 0, '-', '+',
         '-', 3, '+', 3, '+', 0, '-', '-', '+', '-', 3, '*', 1, -3, -1, 1, 2,
         2], 36, [-2, 3, 0, 3, 3, 0, 3, 1, -3, -1, 1, 2, 2],
        ['+', 2, '+', '*', 2, '-', '*', 1, '*', -1, '*', '-', '-', '+', '-',
         '+', '+', '+', '-', '-', '+', '*', -3, 1, '-', 3, 0, 3, '-', 3, 0, 3,
         -2],
        ['+', 2, '+', '*', 2, '-', '*', 1, '-', '*', '-', '-', '-', '+', '+',
         '-', '-', '+', '*', -3, 1, '-', 3, 3, '-', 3, 3, -2]),
    Ib002BuiltTrees(
        ['-', '*', '*', '*', '-', '+', '-', '*', 3, '+', '*', '-', '-', '-',
         -1, 1, -1, '-', '-', '+', '-', '*', '-', '*', -2, 4, 0, 1, -3, 4, 4],
        -48, [3, -1, 1, -1, -2, 4, 0, 1, -3, 4, 4],
        ['-', '*', 4, '*', 4, '*', -3, '-', '+', '-', '-', '+', 1, '-', '*', 0,
         '-', '*', 4, -2, '-', '*', '+', -1, '*', 1, '-', '-', '-', -1, 3],
        ['-', '*', 4, '*', 4, '*', -3, '-', '+', '-', '-', '+', 1, '-', '*', 0,
         '-', '*', 4, -2, '-', '*', '+', -1, '*', 1, '-', '-', '-', -1, 3]),
    Ib002BuiltTrees(
        ['-', '-', '*', '+', -1, '-', 1, '*', '-', '-', '-', '+', '+', 1, '-',
         '-', -2, '+', '+', '-', -1, 2, '-', '*', '+', 1, '+', 4, 4, -2, 3],
        120, [-1, 1, 1, -2, -1, 2, 1, 4, 4, -2, 3],
        ['-', '-', '*', '*', 3, '-', '-', '-', '+', '+', '-', '*', -2, '+',
         '+', 4, 4, 1, '+', 2, '-', -1, '+', '-', '-', -2, 1, '+', '-', 1, -1],
        ['-', '-', '*', '*', 3, '-', '-', '-', '+', '+', '-', '*', -2, '+',
         '+', 4, 4, 1, '+', 2, '-', -1, '+', '-', '-', -2, 1, '+', '-', 1,
         -1]),
    Ib002BuiltTrees(
        ['-', '+', 3, '*', '*', '-', '-', '+', '-', '-', '+', '-', '-', '+',
         '+', '*', '*', 1, '-', '*', -1, '-', '-', 0, -1, -1, 4, -1, -3, -3,
         3], -12, [3, 1, -1, 0, -1, -1, 4, -1, -3, -3, 3],
        ['-', '+', '*', 3, '*', -3, '-', '-', '+', -3, '-', '-', '+', -1, '-',
         '-', '+', 4, '+', -1, '*', -1, '*', '-', '*', '-', '-', 0, -1, 1, 3],
        ['-', '+', '*', 3, '*', -3, '-', '-', '+', -3, '-', '-', '+', -1, '-',
         '-', '+', 4, '+', -1, '-', '*', '-', '-', '-', '-', 0, 1, 3]),
    Ib002BuiltTrees(
        ['+', '-', '-', '-', '+', '+', '-', 4, '*', '+', '-', 4, '-', '*', '-',
         4, '-', '-', 1, '*', '+', '*', '+', '*', 0, -1, 3, 4, 2, 4, -1, -3],
        2, [4, 4, 4, 1, 0, -1, 3, 4, 2, 4, -1, -3],
        ['+', -3, '-', '-', '-', '+', -1, '+', '*', '*', 4, '+', 2, '*', 4,
         '+', 3, '*', -1, 0, '+', '-', '*', '-', '-', 1, '-', 4, '-', 4, '-',
         4],
        ['+', -3, '-', '-', '-', '+', -1, '+', '*', '*', 4, '+', 2, '*', 4,
         '+', 3, '-', 0, '+', '-', '*', '-', '-', 1, '-', 4, '-', 4, '-', 4]),
    Ib002BuiltTrees(
        ['-', '-', '*', '*', '*', '-', '-', -2, '*', 1, '-', '+', '*', '+',
         '-', 1, '-', '+', '+', '*', '-', '*', '-', -3, 4, -1, 0, 2, 0, -2, -3,
         3], 36, [-2, 1, 1, -3, 4, -1, 0, 2, 0, -2, -3, 3],
        ['-', '-', '*', 3, '*', -3, '*', '*', '-', '+', -2, '*', 0, '+', '-',
         '+', 2, '+', 0, '*', -1, '-', '*', 4, '-', -3, '-', 1, 1, '-', '-',
         -2],
        ['-', '-', '*', 3, '*', -3, '*', '*', '-', '+', -2, '*', 0, '+', '-',
         '+', 2, '-', '-', '*', 4, '-', -3, '-', 1, 1, '-', '-', -2]),
    Ib002BuiltTrees(
        ['+', '-', '-', '+', '*', '*', '*', '+', '*', '-', '*', '+', 4, '*',
         '-', '-', '*', '-', '-', '-', '+', 1, 0, 2, 4, 0, 2, -1, 2, 0, -1, 1,
         -1], 0, [4, 1, 0, 2, 4, 0, 2, -1, 2, 0, -1, 1, -1],
        ['+', -1, '-', '-', '+', 1, '*', -1, '*', 0, '*', 2, '+', -1, '*', 2,
         '-', '*', 0, '+', '*', 4, '-', '-', '*', 2, '-', '-', '-', '+', 0, 1,
         4],
        ['+', -1, '-', '-', '+', 1, '-', '*', 0, '*', 2, '+', -1, '*', 2, '-',
         '*', 0, '+', '*', 4, '-', '-', '*', 2, '-', '-', '-', 1, 4]),
    Ib002BuiltTrees(
        ['*', 2, '+', '+', 3, '+', '*', '+', '*', '*', '-', '-', '+', '+', 0,
         '+', '-', '-', -1, '-', '+', 1, '*', 4, '-', 3, '-', 3, 2, 3, 2, 2, 0,
         1], 184, [2, 3, 0, -1, 1, 4, 3, 3, 2, 3, 2, 2, 0, 1],
        ['*', '+', 1, '+', '+', 0, '*', 2, '+', 2, '*', 3, '*', 2, '-', '-',
         '+', '-', 3, '+', '+', '-', '+', '*', '-', 3, 4, 1, '-', '-', -1, 0,
         3, 2],
        ['*', '+', 1, '+', '*', 2, '+', 2, '*', 3, '*', 2, '-', '-', '+', '-',
         3, '+', '-', '+', '*', '-', 3, 4, 1, '-', '-', -1, 3, 2]),
    Ib002BuiltTrees(
        ['*', '*', '+', '+', '+', '*', '-', '-', '-', '+', '-', '*', '-', '-',
         '-', '-', '*', '-', '-', '*', -3, 1, -3, 4, -3, 3, -1, -3, -3, 1, -1],
        -110, [-3, 1, -3, 4, -3, 3, -1, -3, -3, 1, -1],
        ['*', -1, '*', 1, '+', -3, '+', -3, '+', -1, '*', 3, '-', '-', '-',
         '+', -3, '-', '*', 4, '-', '-', '-', '-', '*', -3, '-', '-', '*', 1,
         -3],
        ['-', '*', 1, '+', -3, '+', -3, '+', -1, '*', 3, '-', '-', '-', '+',
         -3, '-', '*', 4, '-', '-', '-', '-', '*', -3, '-', '-', '*', 1, -3]),
    Ib002BuiltTrees(
        ['-', '+', '-', '-', '*', '*', 0, '*', -3, '-', 2, '-', '*', '-', '+',
         '-', 2, '*', '+', '+', '*', '*', '+', '-', 2, 0, -3, -3, -3, -1, 0, 4,
         0], 0, [0, -3, 2, 2, 2, 0, -3, -3, -3, -1, 0, 4, 0],
        ['-', '+', 0, '-', '-', '*', '-', '*', 4, '-', '+', '*', 0, '+', -1,
         '+', -3, '*', -3, '*', -3, '+', 0, '-', 2, '-', 2, '*', '*', '-', 2,
         -3, 0],
        ['-', '-', '-', '*', '-', '*', 4, '-', '+', '*', 0, '+', -1, '+', -3,
         '*', -3, '*', -3, '-', 2, '-', 2, '*', '*', '-', 2, -3, 0]),
    Ib002BuiltTrees(
        ['-', '*', -2, '-', '+', '-', '-', '-', '-', '*', '*', '+', 2, 3, '*',
         '-', '*', '+', 3, '+', '+', '-', '*', '+', 1, -3, -1, 0, 2, 2, 0, 4,
         -2], 4, [-2, 2, 3, 3, 1, -3, -1, 0, 2, 2, 0, 4, -2],
        ['-', '*', '-', '+', -2, '-', '-', '-', '-', '*', 4, '*', '*', 0, '-',
         '*', 2, '+', '+', 2, '+', 0, '-', '*', -1, '+', -3, 1, 3, '+', 3, 2,
         -2],
        ['-', '*', '-', '+', -2, '-', '-', '-', '-', '*', 4, '*', '*', 0, '-',
         '*', 2, '+', '+', 2, '-', '-', '+', -3, 1, 3, '+', 3, 2, -2]),
    Ib002BuiltTrees(
        ['+', -1, '-', '-', '*', '-', '-', '-', '-', '-', '*', 0, '-', '-',
         '+', '+', '*', '+', '*', '*', '*', '+', 4, 0, 3, -1, -2, -3, -3, -2,
         -2, -1], -1, [-1, 0, 4, 0, 3, -1, -2, -3, -3, -2, -2, -1],
        ['+', '-', '-', '*', -1, '-', '-', '-', '-', '-', '*', '-', '-', '+',
         -2, '+', -2, '*', -3, '+', -3, '*', -2, '*', -1, '*', 3, '+', 0, 4, 0,
         -1],
        ['+', '-', '-', '-', '-', '-', '-', '-', '-', '*', '-', '-', '+', -2,
         '+', -2, '*', -3, '+', -3, '*', -2, '-', '*', 3, 4, 0, -1]),
    Ib002BuiltTrees(
        ['-', '+', 2, '-', '*', 0, '+', '-', '-', 1, '+', 2, '+', '*', '+',
         '-', '-', '-', '*', '+', '-', '+', 2, 3, '+', '+', 3, 2, -2, -3, 0, 1,
         -2], -2, [2, 0, 1, 2, 2, 3, 3, 2, -2, -3, 0, 1, -2],
        ['-', '+', '-', '*', '+', '+', '+', -2, '*', 1, '+', 0, '-', '-', '-',
         '*', -3, '+', '+', -2, '+', 2, 3, '-', '+', 3, 2, 2, '-', '-', 1, 0,
         2],
        ['-', '+', '-', '*', '+', '+', '+', -2, '*', 1, '-', '-', '-', '*', -3,
         '+', '+', -2, '+', 2, 3, '-', '+', 3, 2, 2, '-', '-', 1, 0, 2]),
    Ib002BuiltTrees(
        ['-', '*', '*', '+', '-', '+', '-', 1, -3, '+', '+', '-', '-', '-',
         '-', 1, 3, '*', -2, '+', '*', '*', '+', '-', 2, '-', 1, -3, -1, -3,
         -1, 1], 32, [1, -3, 1, 3, -2, 2, 1, -3, -1, -3, -1, 1],
        ['-', '*', 1, '*', -1, '+', '+', '*', '+', -3, '*', -1, '*', -3, '+',
         '-', 1, '-', 2, -2, '+', 3, '-', '-', '-', '-', 1, '-', '+', -3, '-',
         1],
        ['-', '*', 1, '-', '+', '+', '*', '+', -3, '-', '*', -3, '+', '-', 1,
         '-', 2, -2, '+', 3, '-', '-', '-', '-', 1, '-', '+', -3, '-', 1]),
    Ib002BuiltTrees(
        ['+', '+', '*', 1, '-', '+', '*', '-', '*', '+', '-', -3, -1, '+', '*',
         -1, 3, '*', '*', '-', '-', -2, '-', '-', '+', 0, '+', 0, 2, 0, 0, 1,
         1, 1], 1, [1, -3, -1, -1, 3, -2, 0, 0, 2, 0, 0, 1, 1, 1],
        ['+', 1, '+', 1, '*', '-', '+', 1, '*', 0, '-', '*', '+', '*', 0, '*',
         '-', '-', '+', '+', 2, 0, 0, '-', '-', -2, '*', 3, -1, '+', -1, '-',
         -3, 1],
        ['+', 1, '+', 1, '*', '-', '+', 1, '*', 0, '-', '*', '+', '*', 0, '*',
         '-', '-', 2, '-', '-', -2, '-', 3, '+', -1, '-', -3, 1]),
    Ib002BuiltTrees(
        ['-', '+', '*', 1, '-', '-', '+', 4, '+', 0, '+', 0, '*', '-', '-',
         '*', '+', '*', 0, '*', '-', '+', '-', '+', '-', -2, -1, -3, 2, -3, -1,
         -2, -2], 4, [1, 4, 0, 0, 0, -2, -1, -3, 2, -3, -1, -2, -2],
        ['-', '+', -2, '*', '-', '-', '+', '+', '+', '*', -2, '-', '-', '*',
         -1, '+', -3, '*', '*', 2, '-', '+', -3, '-', '+', -1, '-', -2, 0, 0,
         0, 4, 1],
        ['-', '+', -2, '*', '-', '-', '+', '*', -2, '-', '-', '-', '+', -3,
         '*', '*', 2, '-', '+', -3, '-', '+', -1, '-', -2, 0, 4, 1]),
    Ib002BuiltTrees(
        ['*', '*', '-', -2, '-', '-', '*', '*', '*', '+', '-', 0, '+', '-',
         '+', '*', '*', -2, '+', 0, '-', '-', '*', 2, 4, '-', 0, 3, -3, 2, 2,
         -1, -2], -96, [-2, 0, -2, 0, 2, 4, 0, 3, -3, 2, 2, -1, -2],
        ['*', -2, '*', '-', '-', '*', -1, '*', 2, '*', 2, '+', '+', -3, '-',
         '+', 3, '*', '-', 0, '*', '+', '-', '-', '*', 4, 2, 0, -2, '-', 0,
         '-', -2],
        ['*', -2, '*', '-', '-', '-', '*', 2, '*', 2, '+', '+', -3, '-', '+',
         3, '*', '-', 0, '*', '-', '-', '*', 4, 2, -2, '-', 0, '-', -2]),
    Ib002BuiltTrees(
        ['-', '+', 0, '+', '+', '*', '*', 3, '*', '-', '-', -3, '+', '-', -3,
         '+', 0, '*', 2, '*', '-', -2, -2, '-', '*', '-', '-', -1, '+', 2, -1,
         3, 2], -50, [0, 3, -3, -3, 0, 2, -2, -2, -1, 2, -1, 3, 2],
        ['-', '+', '+', 2, '+', 3, '*', '-', '*', '+', -1, 2, '-', '-', -1,
         '*', '*', '+', '+', '*', '*', -2, '-', -2, 2, 0, '-', -3, '-', '-',
         -3, 3, 0],
        ['-', '+', 2, '+', 3, '*', '-', '*', '+', -1, 2, '-', '-', -1, '*',
         '*', '+', '*', '*', -2, '-', -2, 2, '-', -3, '-', '-', -3, 3]),
    Ib002BuiltTrees(
        ['*', '-', '+', 3, '-', '*', '+', '*', '+', '+', '-', '+', '*', '*',
         '+', '+', 0, '-', '-', '-', 2, '-', '*', 4, -3, 1, 3, -3, 0, -2, 0, 1,
         0, -3], 9, [3, 0, 2, 4, -3, 1, 3, -3, 0, -2, 0, 1, 0, -3],
        ['*', -3, '-', '+', '-', '*', 0, '+', 1, '*', 0, '+', -2, '+', 0, '-',
         '+', -3, '*', 3, '*', 1, '+', '-', '*', -3, 4, '+', '-', '-', '-', 2,
         0, 3],
        ['*', -3, '-', '+', '-', '*', 0, '+', 1, '*', 0, '+', -2, '-', '+', -3,
         '*', 3, '*', 1, '+', '-', '*', -3, 4, '-', '-', '-', 2, 3]),
    Ib002BuiltTrees(
        ['*', '-', '*', '*', 3, '*', '*', '+', '-', '*', '*', '-', '+', '*',
         '-', '+', '-', '-', '*', '+', 1, '+', -2, 0, 3, -1, 2, 0, 3, 4, 0, 1,
         2, 3, -2], 3456, [3, 1, -2, 0, 3, -1, 2, 0, 3, 4, 0, 1, 2, 3, -2],
        ['*', -2, '-', '*', 3, '*', '*', 2, '*', 1, '+', 0, '-', '*', 4, '*',
         3, '-', '+', 0, '*', 2, '-', '+', -1, '-', '-', '*', 3, '+', '+', 0,
         -2, 1, 3],
        ['*', -2, '-', '*', 3, '*', '*', 2, '*', 1, '-', '*', 4, '*', 3, '-',
         '*', 2, '-', '+', -1, '-', '-', '*', 3, '+', -2, 1, 3]),
    Ib002BuiltTrees(
        ['+', '-', '+', 3, -2, '+', 4, '*', '+', '-', '+', '+', 2, 2, '+', 0,
         '+', '+', 0, -3, '-', 0, '+', '+', '-', '+', 0, '-', '-', '*', 2, -1,
         -2, -2, 1], 0, [3, -2, 4, 2, 2, 0, 0, -3, 0, 0, 2, -1, -2, -2, 1],
        ['+', '+', '*', 1, '+', '+', -2, '+', -2, '-', '+', '-', '-', '*', -1,
         2, 0, '-', '+', '+', '+', '-', 0, '+', -3, 0, 0, '+', 2, 2, 4, '-',
         '+', -2, 3],
        ['+', '+', '*', 1, '+', '+', -2, '+', -2, '-', '-', '-', '-', 2, '-',
         '+', '+', '-', 0, -3, '+', 2, 2, 4, '-', '+', -2, 3]),
    Ib002BuiltTrees(
        ['+', '+', '-', -2, '-', '-', '+', '+', -3, '-', '-', '+', 2, '*', '+',
         '-', '*', '-', '+', '*', '*', '*', '-', 3, 1, 3, -1, -1, 4, -2, 0, 2,
         1], 4, [-2, -3, 2, 3, 1, 3, -1, -1, 4, -2, 0, 2, 1],
        ['+', 1, '+', '-', '-', '+', 2, '+', '-', '-', '+', '*', 0, '+', -2,
         '-', '*', 4, '-', '+', -1, '*', -1, '*', 3, '*', 1, '-', 3, 2, -3,
         '-', -2],
        ['+', 1, '+', '-', '-', '+', 2, '+', '-', '-', '+', '*', 0, '+', -2,
         '-', '*', 4, '-', '+', -1, '-', '*', 3, '*', 1, '-', 3, 2, -3, '-',
         -2]),
    Ib002BuiltTrees(
        ['-', '-', '+', '-', '+', 1, '-', '*', '*', 3, '-', '*', '+', 0, '+',
         '*', '+', '+', '-', -1, -3, '-', '-', '+', -2, 1, '*', -3, 2, -2, 2,
         0, -2], -3, [1, 3, 0, -1, -3, -2, 1, -3, 2, -2, 2, 0, -2],
        ['-', '-', '+', -2, '-', '+', '-', '*', 0, '*', '-', '*', 2, '+', '+',
         -2, '*', '*', 2, -3, '+', '-', '-', '+', 1, -2, '+', -3, '-', -1, 0,
         3, 1],
        ['-', '-', '+', -2, '-', '+', '-', '*', 0, '*', '-', '*', 2, '+', -2,
         '*', '*', 2, -3, '+', '-', '-', '+', 1, -2, '+', -3, '-', -1, 3, 1]),
    Ib002BuiltTrees(
        ['*', '*', '*', '+', -3, '-', '-', '*', '-', 3, -3, '+', '-', '-', '-',
         '+', '*', '*', '*', '+', 3, -1, 3, '-', '*', 2, '-', 1, 4, 4, 2, 1,
         -2], 600, [-3, 3, -3, 3, -1, 3, 2, 1, 4, 4, 2, 1, -2],
        ['*', -2, '*', 1, '*', '+', 2, '-', '-', '-', '+', 4, '*', 4, '*', '-',
         '*', '-', 1, 2, '*', 3, '+', -1, 3, '+', '-', '-', '*', -3, '-', 3,
         -3],
        ['*', -2, '*', 1, '*', '+', 2, '-', '-', '-', '+', 4, '*', 4, '*', '-',
         '*', '-', 1, 2, '*', 3, '+', -1, 3, '+', '-', '-', '*', -3, '-', 3,
         -3]),
    Ib002BuiltTrees(
        ['+', '-', '*', '-', 1, '+', -1, '*', '-', '+', '-', '*', '*', '+',
         '+', '*', '+', '-', 2, '-', 3, '+', '*', '-', 0, -1, -3, 1, -2, 3, 1,
         0, 4, 4], 171, [1, -1, 2, 3, 0, -1, -3, 1, -2, 3, 1, 0, 4, 4],
        ['+', 4, '-', '*', '+', '*', 4, '-', '+', 0, '-', '*', 1, '*', 3, '+',
         -2, '+', 1, '*', '+', -3, '*', -1, '-', 0, '+', '-', 3, '-', 2, -1,
         '-', 1],
        ['+', 4, '-', '*', '+', '*', 4, '-', '-', '*', 1, '*', 3, '+', -2, '+',
         1, '*', '+', -3, '-', '-', 0, '+', '-', 3, '-', 2, -1, '-', 1]),
    Ib002BuiltTrees(
        ['*', '+', '-', '*', 0, '-', -3, '-', '*', '-', '+', 0, '*', '-', '*',
         '-', '-', '*', -2, '+', -3, '*', '+', '*', 3, 1, '-', 1, -2, 2, -3,
         -1, -3], 252, [0, -3, 0, -2, -3, 3, 1, 1, -2, 2, -3, -1, -3],
        ['*', -3, '+', '-', '*', -1, '-', '+', '*', -3, '-', '*', 2, '-', '-',
         '*', '+', '*', -2, '+', '-', 1, '*', 1, 3, -3, -2, 0, '-', '*', '-',
         -3, 0],
        ['*', -3, '+', '-', '-', '-', '*', -3, '-', '*', 2, '-', '-', '*', '+',
         '*', -2, '+', '-', 1, '*', 1, 3, -3, -2, '-', '*', '-', -3, 0]),
    Ib002BuiltTrees(
        ['-', '*', '-', '+', '*', '-', -3, '-', '+', '+', 4, '-', '*', '+', 0,
         '-', -2, '-', '-', '+', '*', '*', 4, '+', '*', 4, -2, 1, -2, 2, -3,
         -1, 1], 344, [-3, 4, 0, -2, 4, 4, -2, 1, -2, 2, -3, -1, 1],
        ['-', '*', 1, '-', '+', -1, '*', '-', '+', -3, '+', '-', '*', '-', '-',
         '+', 2, '*', -2, '*', '+', 1, '*', -2, 4, 4, '+', '-', -2, 0, 4, '-',
         -3],
        ['-', '*', 1, '-', '+', -1, '*', '-', '+', -3, '+', '-', '*', '-', '-',
         '+', 2, '*', -2, '*', '+', 1, '*', -2, 4, 4, '-', -2, 4, '-', -3]),
    Ib002BuiltTrees(
        ['+', 4, '+', '+', '-', 2, '*', '-', '-', '*', '+', -2, 0, '-', 4, -1,
         '*', '*', '+', '+', '-', '+', 2, '-', -1, '+', 1, '-', '*', 0, 3, 4,
         -3, 1], -12, [4, 2, -2, 0, 4, -1, 2, -1, 1, 0, 3, 4, -3, 1],
        ['+', '+', '*', 1, '*', -3, '+', 4, '+', '+', '-', '*', 3, 0, 1, '-',
         '+', '-', -1, 2, '+', '*', -1, '-', '-', '*', '-', 4, '+', 0, -2, '-',
         2, 4],
        ['+', '+', '*', 1, '*', -3, '+', 4, '+', '+', '-', '*', 3, 0, 1, '-',
         '+', '-', -1, 2, '+', '-', '-', '-', '*', '-', 4, -2, '-', 2, 4]),
    Ib002BuiltTrees(
        ['*', '+', -2, '+', '*', '*', '+', '-', '-', '*', '+', 4, '*', '-',
         '-', '+', '-', '-', '-', '*', '*', '+', 3, 0, 1, -1, -1, 4, 2, 1, 3,
         1, 4, -3], -231, [-2, 4, 3, 0, 1, -1, -1, 4, 2, 1, 3, 1, 4, -3],
        ['*', -3, '+', '+', 4, '*', 1, '*', 3, '+', 1, '-', '-', '*', 2, '+',
         '*', 4, '-', '-', '+', -1, '-', '-', '-', '*', -1, '*', 1, '+', 0, 3,
         4, -2],
        ['*', -3, '+', '+', 4, '*', 1, '*', 3, '+', 1, '-', '-', '*', 2, '+',
         '*', 4, '-', '-', '+', -1, '-', '-', '-', '-', '*', 1, 3, 4, -2]),
    Ib002BuiltTrees(
        ['*', '+', '+', '*', 0, '+', '-', '*', '*', '-', -1, -1, '+', -3, '+',
         1, '-', '+', '*', '-', '-', '*', '+', '-', '+', 2, 0, -3, -2, -3, 3,
         2, 0, 0, 2], 0, [0, -1, -1, -3, 1, 2, 0, -3, -2, -3, 3, 2, 0, 0, 2],
        ['*', 2, '+', 0, '+', 0, '*', '+', 2, '-', '*', '+', '+', '-', '+', 3,
         '*', -3, '-', '-', '*', -2, '+', -3, '-', '+', 0, 2, 1, -3, '*', -1,
         '-', -1, 0],
        ['*', 2, '*', '+', 2, '-', '*', '+', '+', '-', '+', 3, '*', -3, '-',
         '-', '*', -2, '+', -3, '-', 2, 1, -3, '-', '-', -1, 0]),
    Ib002BuiltTrees(
        ['-', '-', '*', '*', '-', '+', '*', '-', -2, '-', 2, '-', '*', '-',
         '+', -2, '*', 4, '+', '*', 0, '+', '*', '+', 2, '+', 1, 1, -2, 2, 0,
         1, 4, -2], -48, [-2, 2, -2, 4, 0, 2, 1, 1, -2, 2, 0, 1, 4, -2],
        ['-', '-', '*', -2, '*', 4, '-', '+', '-', '*', 1, '-', '+', '*', '+',
         0, '*', '+', 2, '*', -2, '+', '+', 1, 1, 2, 0, 4, -2, '*', '-', 2,
         '-', -2],
        ['-', '-', '*', -2, '*', 4, '-', '+', '-', '*', 1, '-', '+', '*', '*',
         '+', 2, '*', -2, '+', '+', 1, 1, 2, 0, 4, -2, '*', '-', 2, '-', -2]),
    Ib002BuiltTrees(
        ['*', 0, '-', '+', '*', '*', '+', '-', '*', '-', '-', '*', 3, '+', '-',
         '*', '*', '-', '+', -1, '*', '-', '+', 3, -1, 3, 4, -3, 1, 4, 2, 1, 3,
         3], 0, [0, 3, -1, 3, -1, 3, 4, -3, 1, 4, 2, 1, 3, 3],
        ['*', '-', '+', 3, '*', 3, '*', 1, '+', 2, '-', '*', 4, '-', '-', '*',
         '+', 1, '-', '*', -3, '*', 4, '-', '+', '*', 3, '-', '+', -1, 3, -1,
         3, 0],
        ['*', '-', '+', 3, '*', 3, '*', 1, '+', 2, '-', '*', 4, '-', '-', '*',
         '+', 1, '-', '*', -3, '*', 4, '-', '+', '*', 3, '-', '+', -1, 3, -1,
         3, 0]),
    Ib002BuiltTrees(
        ['*', '-', '+', '*', '*', '-', '*', '-', -1, '+', '-', '*', '-', -3,
         '+', 3, '*', '*', -1, '-', '*', -2, '+', '-', '-', -2, -3, 0, -3, 2,
         -1, 4, 1], 20, [-1, -3, 3, -1, -2, -2, -3, 0, -3, 2, -1, 4, 1],
        ['*', 1, '-', '+', 4, '*', -1, '*', 2, '-', '*', '+', -3, '-', '*',
         '+', '*', 0, '*', '-', '*', '+', -3, '-', '-', -2, -2, -1, 3, '-', -3,
         '-', -1],
        ['*', 1, '-', '+', 4, '-', '*', 2, '-', '*', '+', -3, '-', '*', '+',
         '*', 0, '-', '-', '*', '+', -3, '-', '-', -2, -2, 3, '-', -3, '-',
         -1]),
    Ib002BuiltTrees(
        ['+', '-', '+', '+', '-', '-', '+', '-', -2, -1, '+', '-', '*', '-',
         '*', 1, '*', '+', '+', 4, '-', 3, '*', '+', '*', -3, 3, 2, -2, 2, -3,
         4, 0, 1], 86, [-2, -1, 1, 4, 3, -3, 3, 2, -2, 2, -3, 4, 0, 1],
        ['+', 1, '-', '+', 0, '+', '+', 4, '-', '*', -3, '-', '*', '*', 2, '+',
         '*', -2, '+', 2, '*', 3, -3, '+', '-', 3, 4, 1, '-', '-', '+', -1,
         '-', -2],
        ['+', 1, '-', '+', '+', 4, '-', '*', -3, '-', '*', '*', 2, '+', '*',
         -2, '+', 2, '*', 3, -3, '+', '-', 3, 4, 1, '-', '-', '+', -1, '-',
         -2]),
    Ib002BuiltTrees(
        ['-', '+', '*', '*', '+', '*', '-', '*', '*', 0, '+', '-', '-', '+',
         '+', '-', '*', '-', 2, '*', '-', '*', 4, -2, 3, 3, 1, 2, 4, 2, 3, 4,
         -2, -1], 25, [0, 2, 4, -2, 3, 3, 1, 2, 4, 2, 3, 4, -2, -1],
        ['-', '+', -1, '*', -2, '*', 4, '+', 3, '*', 2, '-', '*', 4, '*', '+',
         2, '-', '-', '+', 1, '+', 3, '-', '*', '*', 3, '-', '*', -2, 4, '-',
         2, 0],
        ['-', '+', -1, '*', -2, '*', 4, '+', 3, '*', 2, '-', '*', 4, '*', '+',
         2, '-', '-', '+', 1, '+', 3, '-', '*', '*', 3, '-', '*', -2, 4, '-',
         2, 0]),
    Ib002BuiltTrees(
        ['+', '*', '-', '+', '+', '-', -2, '*', -3, '-', '-', 1, '-', '*', -3,
         1, '*', '+', '+', 3, '-', '*', '*', 3, '*', '-', '-', -1, -1, -2, -2,
         3, 3], -39, [-2, -3, 1, -3, 1, 3, 3, -1, -1, -2, -2, 3, 3],
        ['+', 3, '*', '*', 3, '+', -2, '+', '-', '*', -2, '*', '*', -1, '-',
         '-', -1, 3, 3, '-', '+', '-', '*', 1, -3, '+', '*', '-', '-', 1, -3,
         '-', -2],
        ['+', 3, '*', '*', 3, '+', -2, '+', '-', '*', -2, '*', '-', '-', '-',
         -1, 3, 3, '-', '+', '-', '*', 1, -3, '+', '*', '-', '-', 1, -3, '-',
         -2]),
    Ib002BuiltTrees(
        ['*', '*', '+', '-', '+', '-', '-', '+', '+', '-', 1, '*', '*', 4, '-',
         2, '*', -3, '*', '+', '*', '-', 4, '+', '-', 4, 3, -1, 1, -2, 2, 2,
         -1, 2], 138, [1, 4, 2, -3, 4, 4, 3, -1, 1, -2, 2, 2, -1, 2],
        ['*', 2, '*', -1, '+', 2, '-', '+', 2, '-', '-', '+', -2, '+', '*',
         '*', '*', 1, '+', -1, '*', '+', 3, '-', 4, '-', 4, -3, '*', '-', 2, 4,
         '-', 1],
        ['*', 2, '-', '+', 2, '-', '+', 2, '-', '-', '+', -2, '+', '*', '*',
         '*', 1, '+', -1, '*', '+', 3, '-', 4, '-', 4, -3, '*', '-', 2, 4, '-',
         1]),
    Ib002BuiltTrees(
        ['+', 4, '-', '-', '-', '*', '+', -1, 2, '*', '-', '-', 2, '*', '*',
         '*', '*', -1, '+', '-', '*', 1, '-', '*', 4, '*', '+', -3, 1, -2, 3,
         2, 3, 2], 460, [4, -1, 2, 2, -1, 1, 4, -3, 1, -2, 3, 2, 3, 2],
        ['+', '-', '-', '-', '*', '*', '*', 2, '*', 3, '*', 2, '*', '+', 3,
         '-', '*', '-', '*', '*', -2, '+', 1, -3, 4, 1, -1, '-', '-', 2, '+',
         2, -1, 4],
        ['+', '-', '-', '-', '*', '*', '*', 2, '*', 3, '*', 2, '-', '+', 3,
         '-', '*', '-', '*', '*', -2, '+', 1, -3, 4, 1, '-', '-', 2, '+', 2,
         -1, 4]),
    Ib002BuiltTrees(
        ['*', '+', '-', -3, 0, '*', '-', 4, '*', '-', '+', '*', '+', '+', '-',
         '-', 2, -3, '+', '*', '-', '*', '-', 4, '+', '+', -2, 1, 3, 2, 1, 3,
         -2, -2], -1104, [-3, 0, 4, 2, -3, 4, -2, 1, 3, 2, 1, 3, -2, -2],
        ['*', '*', '*', -2, '-', '+', -2, '*', 3, '+', '+', 1, '*', 2, '-',
         '*', '+', 3, '+', 1, -2, '-', 4, '+', -3, '-', '-', 2, '-', 4, '+', 0,
         '-', -3],
        ['*', '*', '*', -2, '-', '+', -2, '*', 3, '+', '+', 1, '*', 2, '-',
         '*', '+', 3, '+', 1, -2, '-', 4, '+', -3, '-', '-', 2, '-', 4, '-',
         -3]),
    Ib002BuiltTrees(
        ['*', 2, '+', '-', '*', '*', 2, '*', 3, '-', '+', '*', 4, '+', '+',
         '-', '+', 0, '-', '*', -1, '*', '*', 0, '-', '+', '+', 4, 2, 0, -3,
         -2, 2, 4, 0, 1], 2,
        [2, 2, 3, 4, 0, -1, 0, 4, 2, 0, -3, -2, 2, 4, 0, 1],
        ['*', '+', 1, '-', '*', 0, '*', '*', '-', '+', 4, '*', '+', 2, '+', -2,
         '-', '+', '-', '*', '*', -3, '*', '-', '+', 0, '+', 2, 4, 0, -1, 0, 4,
         3, 2, 2],
        ['*', '+', 1, '-', '*', 0, '*', '*', '-', '+', 4, '*', '+', 2, '+', -2,
         '-', '-', '-', '*', -3, '*', '-', '+', 2, 4, 0, 4, 3, 2, 2]),
    Ib002BuiltTrees(
        ['*', 1, '*', '*', '*', '+', '*', '-', '+', '*', '-', '-', '-', '*', 3,
         '-', -1, '*', '-', '*', 4, '*', '*', '+', 0, 4, 3, 2, 0, -3, -3, 1, 3,
         -1, 0], 0, [1, 3, -1, 4, 0, 4, 3, 2, 0, -3, -3, 1, 3, -1, 0],
        ['*', '*', 0, '*', -1, '*', 3, '+', 1, '*', -3, '-', '+', -3, '*', '*',
         0, '-', '*', '*', 2, '*', 3, '+', 4, 0, 4, '-', '-', '-', '*', '-',
         -1, 3, 1],
        ['*', '*', 0, '-', '*', 3, '+', 1, '*', -3, '-', '+', -3, '*', '*', 0,
         '-', '*', '*', 2, '*', 3, 4, 4, '-', '-', '-', '*', '-', -1, 3, 1]),
    Ib002BuiltTrees(
        ['-', '*', '*', -3, '*', -3, '*', 4, '+', '+', 0, '*', 0, -1, 0, '*',
         '*', 4, '-', 4, '-', '+', '-', 2, '+', '+', '*', '-', '-', '*', -2, 3,
         -2, 2, -3], 0, [-3, -3, 4, 0, 0, -1, 0, 4, 4, 2, -2, 3, -2, 2, -3],
        ['-', '*', '*', '-', '+', '+', -3, '+', 2, '*', -2, '-', '-', '*', 3,
         -2, '-', 2, '*', '-', 4, 4, '*', '*', '*', '+', 0, '+', '*', -1, 0, 0,
         4, -3, -3],
        ['-', '*', '*', '-', '+', '+', -3, '+', 2, '*', -2, '-', '-', '*', 3,
         -2, '-', 2, '*', '-', 4, 4, '*', '*', '*', '-', 0, 4, -3, -3]),
    Ib002BuiltTrees(
        ['+', '-', '*', 0, '-', 1, '*', '+', '+', '+', '*', '+', '+', '*', 2,
         '+', '+', '-', '*', -1, '+', 3, '*', 1, -3, '-', '-', 0, 0, -3, 0, 4,
         4, 2, 2, 2], -8, [0, 1, 2, -1, 3, 1, -3, 0, 0, -3, 0, 4, 4, 2, 2, 2],
        ['+', '*', 2, '+', 2, '+', 2, '+', 4, '*', 4, '+', 0, '+', -3, '*',
         '+', 0, '+', '-', '-', 0, '-', '*', '+', '*', -3, 1, 3, -1, 2, '-',
         '*', '-', 1, 0],
        ['+', '*', 2, '+', 2, '+', 2, '+', 4, '*', 4, '+', -3, '*', '+', '-',
         '-', 0, '-', '-', '+', '*', -3, 1, 3, 2, '-', '*', '-', 1, 0]),
    Ib002BuiltTrees(
        ['+', '-', '+', '+', '-', '-', '*', 1, '*', -1, '*', '*', '*', '*',
         '+', '-', -2, '+', '-', '+', '-', '*', '+', -3, 0, 4, 2, -1, 3, 4, 4,
         0, 4, 3, 1], -6, [1, -1, -2, -3, 0, 4, 2, -1, 3, 4, 4, 0, 4, 3, 1],
        ['+', 1, '-', '+', 3, '+', 4, '-', '-', '*', '*', '*', 0, '*', 4, '*',
         4, '*', 3, '+', '+', -1, '-', '+', 2, '-', '*', 4, '+', 0, -3, '-',
         -2, -1, 1],
        ['+', 1, '-', '+', 3, '+', 4, '-', '-', '*', '-', '*', 0, '*', 4, '*',
         4, '*', 3, '+', '+', -1, '-', '+', 2, '-', '*', 4, -3, '-', -2, 1]),
    Ib002BuiltTrees(
        ['+', '*', '+', 4, '+', '*', -1, '-', 4, '-', -2, '+', -3, '*', '+',
         '+', '-', -3, '*', '*', 1, '-', '*', 0, 3, '-', '-', '*', -3, 4, '+',
         0, 0, -2, 3], -87,
        [4, -1, 4, -2, -3, -3, 1, 0, 3, -3, 4, 0, 0, -2, 3],
        ['+', 3, '*', '+', '*', -2, '+', '+', 0, 0, '+', '*', '-', '-', '*', 4,
         -3, '*', '-', '*', 3, 0, 1, '-', -3, -3, '+', '+', '-', -2, '*', '-',
         4, -1, 4],
        ['+', 3, '*', '+', '*', -2, '+', '*', '-', '-', '*', 4, -3, '*', '-',
         '*', 3, 0, 1, '-', -3, -3, '+', '+', '-', -2, '-', '-', 4, 4]),
    Ib002BuiltTrees(
        ['+', '+', '+', '-', '+', 3, '-', '*', '*', '*', '-', '-', -2, '-',
         '+', '+', 3, 1, '*', '+', -1, '+', '+', 3, -1, 0, 4, '+', '+', -1, 0,
         0, 3, 3, 4, -3], -47,
        [3, -2, 3, 1, -1, 3, -1, 0, 4, -1, 0, 0, 3, 3, 4, -3],
        ['+', -3, '+', 4, '+', 3, '-', '+', '-', '*', 3, '*', '+', 0, '+', 0,
         -1, '*', '-', '+', '*', 4, '+', '+', 0, '+', -1, 3, -1, '+', 1, 3,
         '-', '-', -2, 3],
        ['+', -3, '+', 4, '+', 3, '-', '+', '-', '*', 3, '-', '*', '-', '+',
         '*', 4, '+', '+', -1, 3, -1, '+', 1, 3, '-', '-', -2, 3]),
    Ib002BuiltTrees(
        ['*', '-', '+', '-', '-', '-', '*', '-', '+', '+', '*', '+', '-', '+',
         '-', '+', '+', '+', -1, '*', '-', -1, -3, 1, 2, -2, 3, 1, 2, 1, -2,
         -3, -3], -51, [-1, -1, -3, 1, 2, -2, 3, 1, 2, 1, -2, -3, -3],
        ['*', -3, '-', '+', -3, '-', '-', '-', '*', -2, '-', '+', 1, '+', 2,
         '*', 1, '+', 3, '-', '+', -2, '-', '+', 2, '+', 1, '+', '*', -3, '-',
         -1, -1],
        ['*', -3, '-', '+', -3, '-', '-', '-', '*', -2, '-', '+', 1, '+', 2,
         '*', 1, '+', 3, '-', '+', -2, '-', '+', 2, '+', 1, '+', '*', -3, '-',
         -1, -1]),
    Ib002BuiltTrees(
        ['+', '+', '+', '*', '-', '*', '*', 1, -2, '+', '*', '-', '*', '+',
         '*', -2, '+', '-', '-', '+', '-', '+', '+', 4, 0, 2, 4, 3, -3, 4, -3,
         3, 4, 0, 3, 0], -453,
        [1, -2, -2, 4, 0, 2, 4, 3, -3, 4, -3, 3, 4, 0, 3, 0],
        ['+', 0, '+', 3, '+', 0, '*', 4, '-', '*', '+', 3, '*', -3, '-', '*',
         4, '+', -3, '*', '+', 3, '-', '-', '+', 4, '-', '+', 2, '+', 0, 4, -2,
         '*', -2, 1],
        ['+', 3, '*', 4, '-', '*', '+', 3, '*', -3, '-', '*', 4, '+', -3, '*',
         '+', 3, '-', '-', '+', 4, '-', '+', 2, 4, -2, '*', -2, 1]),
    Ib002BuiltTrees(
        ['+', '-', -2, '*', '*', '*', -1, '*', '*', '+', 0, 3, '*', '*', '-',
         '*', -1, '-', '-', '+', -3, '-', '*', '+', 4, '*', '-', 1, -1, -3, -1,
         2, 2, 0, -2], 2,
        [-2, -1, 0, 3, -1, -3, 4, 1, -1, -3, -1, 2, 2, 0, -2],
        ['+', '*', -2, '*', 0, '*', '*', 2, '*', '*', 2, '*', -1, '-', '*',
         '-', '-', '+', '-', '*', -3, '+', '*', -1, '-', 1, 4, -3, -1, '+', 3,
         0, -1, '-', -2],
        ['+', '*', -2, '*', 0, '-', '*', 2, '*', '*', 2, '-', '-', '-', '-',
         '-', '+', '-', '*', -3, '+', '-', '-', 1, 4, -3, 3, '-', -2]),
    Ib002BuiltTrees(
        ['+', '+', '*', '-', -1, '*', -3, -2, '-', '*', '*', '*', -3, 3, '-',
         '-', 2, '*', '*', '*', '*', 3, '*', 0, '-', '*', '+', 0, 1, '-', 1,
         -1, -1, 3, 1], 7, [-1, -3, -2, -3, 3, 2, 3, 0, 0, 1, 1, -1, -1, 3, 1],
        ['+', 1, '+', '-', '*', '*', 3, '*', -1, '*', -1, '*', '*', '-', '*',
         '-', 1, '+', 1, 0, 0, 3, '*', '-', '-', 2, '*', 3, -3, '*', '*', -2,
         -3, '-', -1],
        ['+', 1, '+', '-', '*', '*', 3, '-', '-', '*', '*', '-', '*', '-', 1,
         1, 0, 3, '*', '-', '-', 2, '*', 3, -3, '*', '*', -2, -3, '-', -1]),
    Ib002BuiltTrees(
        ['*', '*', '-', '*', '*', '*', '+', '-', 0, '-', -3, -2, '*', '*', '*',
         -2, '-', '-', 1, '-', '+', '*', 4, '+', '*', 1, 3, '-', 2, -1, 3, 4,
         -1, 3], -1296, [0, -3, -2, -2, 1, 4, 1, 3, 2, -1, 3, 4, -1, 3],
        ['*', 3, '*', -1, '-', '*', 4, '*', '*', 3, '*', '-', '+', -1, '*',
         '+', '-', 2, '*', 3, 1, 4, '*', '-', '-', 1, -2, '*', -2, '+', '-',
         -3, '-', 0],
        ['*', 3, '-', '-', '*', 4, '*', '*', 3, '*', '-', '+', -1, '*', '+',
         '-', 2, '*', 3, 1, 4, '*', '-', '-', 1, -2, '*', -2, '+', '-', -3,
         '-', 0]),
    Ib002BuiltTrees(
        ['*', '*', '+', '+', '-', '+', 2, 2, '*', -2, '+', '-', '+', -1, -2,
         '*', -1, '*', -2, '*', '-', '-', '*', '+', 1, '-', '-', '-', 1, -3,
         -1, 1, 0, 1], 0, [2, 2, -2, -1, -2, -1, -2, 1, 1, -3, -1, 1, 0, 1],
        ['*', 1, '*', 0, '+', 1, '+', '*', '+', '*', '*', '*', -1, '-', '-',
         '*', -3, '+', '-', '-', '-', 1, 1, -2, -1, '-', '+', -2, -1, -2, '-',
         '+', 2, 2],
        ['*', 1, '*', 0, '+', 1, '+', '*', '+', '-', '*', '-', '-', '-', '*',
         -3, '+', '-', '-', '-', 1, 1, -2, '-', '+', -2, -1, -2, '-', '+', 2,
         2]),
    Ib002BuiltTrees(
        ['+', '-', -2, '*', '+', '-', '+', 1, '-', '*', 2, '*', '*', '*', '*',
         1, '*', '+', '+', '+', 3, 4, '+', '+', '+', '-', -2, 0, 0, 0, 4, -2,
         0, -2, -1, 0, 3], -1,
        [-2, 1, 2, 1, 3, 4, -2, 0, 0, 0, 4, -2, 0, -2, -1, 0, 3],
        ['+', '*', 3, '+', 0, '-', '+', '-', '*', '*', -1, '*', -2, '*', 0,
         '*', '*', -2, '+', 4, '+', '+', 0, '+', 0, '+', 0, '-', -2, '+', 4, 3,
         1, 2, 1, '-', -2],
        ['+', '*', 3, '-', '+', '-', '*', '-', '*', -2, '*', 0, '*', '*', -2,
         '+', 4, '+', '-', -2, '+', 4, 3, 1, 2, 1, '-', -2]),
    Ib002BuiltTrees(
        ['*', '*', '*', 2, '+', 0, '+', '+', '+', '-', 1, '-', '*', '*', -2,
         '-', 0, '-', '+', '-', '*', '*', '+', '-', 2, '+', 1, 3, 3, 3, -3, -1,
         4, -2, 1], -8, [2, 0, 1, -2, 0, 2, 1, 3, 3, 3, -3, -1, 4, -2, 1],
        ['*', 1, '*', -2, '*', '+', '+', 4, '+', -1, '+', '-', '*', '-', '+',
         -3, '-', '*', 3, '*', 3, '+', '+', 3, 1, '-', 2, '*', '-', 0, -2, '-',
         1, 0, 2],
        ['*', 1, '*', -2, '*', '+', 4, '+', -1, '+', '-', '*', '-', '+', -3,
         '-', '*', 3, '*', 3, '+', '+', 3, 1, '-', 2, '*', '-', 0, -2, '-', 1,
         2]),
    Ib002BuiltTrees(
        ['+', '*', 0, '*', '*', 2, '-', '+', '-', '-', '+', -1, '-', 2, '+',
         '+', '+', '*', '-', '*', '-', -1, '+', 1, '+', -3, '*', 3, 3, 2, 2, 0,
         2, 4, -1], -1, [0, 2, -1, 2, -1, 1, -3, 3, 3, 2, 2, 0, 2, 4, -1],
        ['+', -1, '*', '*', 4, '*', '-', '+', '+', 2, '+', 0, '+', 2, '*', 2,
         '-', '*', '+', '+', '*', 3, 3, -3, 1, '-', -1, '-', '-', '+', '-', 2,
         -1, 2, 0],
        ['+', -1, '*', '*', 4, '*', '-', '+', '+', 2, '+', 2, '*', 2, '-', '*',
         '+', '+', '*', 3, 3, -3, 1, '-', -1, '-', '-', '+', '-', 2, -1, 2,
         0]),
    Ib002BuiltTrees(
        ['-', '*', '+', '*', '+', '-', '+', '+', 2, '+', '-', '-', -2, '-',
         '+', 0, 0, '*', '*', -1, '*', 4, '+', 4, -3, 0, '-', '*', '*', -2, -1,
         2, -3, 2, 1], -14,
        [2, -2, 0, 0, -1, 4, 4, -3, 0, -2, -1, 2, -3, 2, 1],
        ['-', '*', 1, '+', 2, '*', -3, '+', '-', '*', 2, '*', -1, -2, '-', '+',
         '*', 0, '*', '*', '+', -3, 4, 4, -1, '+', '+', '-', '+', 0, 0, '-',
         '-', -2, 2],
        ['-', '*', 1, '+', 2, '*', -3, '+', '-', '*', 2, '-', -2, '-', '+',
         '*', 0, '-', '*', '+', -3, 4, 4, '+', '+', '-', 0, '-', '-', -2, 2]),
    Ib002BuiltTrees(
        ['*', '*', '*', '-', -2, '*', 3, '+', 4, '-', '-', 2, '-', '+', 4, '*',
         '*', 0, '*', '+', 0, '*', '-', 2, '-', '+', '*', '+', 4, 1, -3, -3, 3,
         3, -3], 432, [-2, 3, 4, 2, 4, 0, 0, 2, 4, 1, -3, -3, 3, 3, -3],
        ['*', -3, '*', '-', '+', '*', 3, '*', '*', 3, '+', '*', '-', '+', -3,
         '*', -3, '+', 1, 4, '-', 2, 0, 0, 4, '*', '*', '+', '-', '-', 2, 4, 3,
         '-', -2],
        ['*', -3, '*', '-', '+', '*', 3, '*', '*', 3, '*', '-', '+', -3, '*',
         -3, '+', 1, 4, '-', 2, 0, 4, '*', '*', '+', '-', '-', 2, 4, 3, '-',
         -2]),
    Ib002BuiltTrees(
        ['+', '*', '+', '+', '*', 1, '+', '-', 4, '*', '*', '-', '*', -2, '*',
         -2, '-', '+', '+', '-', '*', '+', '+', '-', -3, 4, 0, -3, 0, 0, 1, -1,
         -2, 4, 3, 3], -255,
        [1, 4, -2, -2, -3, 4, 0, -3, 0, 0, 1, -1, -2, 4, 3, 3],
        ['+', 3, '*', 3, '+', 4, '+', -2, '*', '+', '*', -1, '*', 1, '-', '*',
         '*', '-', '+', 0, '+', 0, '-', '*', -3, '+', 0, '+', 4, '-', -3, -2,
         -2, '-', 4, 1],
        ['+', 3, '*', 3, '+', 4, '+', -2, '*', '+', '-', '*', 1, '-', '*', '*',
         '-', '-', '*', -3, '+', 4, '-', -3, -2, -2, '-', 4, 1]),
    Ib002BuiltTrees(
        ['*', '*', '+', '*', '-', -1, '*', '-', '*', '+', -3, 0, '+', '+', '-',
         '+', '-', '*', -2, 3, '-', '-', '*', '+', -1, '*', 1, 2, -2, 4, 1, 1,
         3, 3, 3], 54, [-1, -3, 0, -2, 3, -1, 1, 2, -2, 4, 1, 1, 3, 3, 3],
        ['*', 3, '*', 3, '+', 3, '*', '*', 1, '-', '*', '+', 1, '+', 4, '-',
         '+', '-', '-', '*', -2, '+', '*', 2, 1, -1, '-', '*', 3, -2, '+', 0,
         -3, '-', -1],
        ['*', 3, '*', 3, '+', 3, '*', '*', 1, '-', '*', '+', 1, '+', 4, '-',
         '+', '-', '-', '*', -2, '+', '*', 2, 1, -1, '-', '*', 3, -2, -3, '-',
         -1]),
    Ib002BuiltTrees(
        ['-', '-', '+', '*', '+', '+', '-', '*', -2, '+', '+', '+', '*', '*',
         '-', 2, '+', '*', '*', '-', 0, '+', '*', -2, 1, 4, 2, 1, -3, 1, -2, 2,
         1, 0, 2, 0], 30, [-2, 2, 0, -2, 1, 4, 2, 1, -3, 1, -2, 2, 1, 0, 2, 0],
        ['-', '-', '+', 0, '*', 2, '+', 0, '+', 1, '-', '*', '+', 2, '+', -2,
         '+', 1, '*', -3, '*', '+', 1, '*', 2, '*', '+', 4, '*', 1, -2, '-', 0,
         '-', 2, -2],
        ['-', '-', '*', 2, '+', 1, '-', '*', '+', 2, '+', -2, '+', 1, '*', -3,
         '*', '+', 1, '*', 2, '*', '+', 4, '*', 1, -2, '-', 0, '-', 2, -2]),
    Ib002BuiltTrees(
        ['*', '*', '-', '+', '-', 1, '*', '+', -1, '-', 2, '*', '*', -2, '+',
         '*', '+', -2, 2, '-', 3, '-', -2, '-', '*', '+', '-', '+', -3, 1, 3,
         0, -2, 2], -4, [1, -1, 2, -2, -2, 2, 3, -2, -3, 1, 3, 0, -2, 2],
        ['*', 2, '*', -2, '-', '+', '*', '*', '-', '*', 0, '+', 3, '-', '+', 1,
         -3, '*', '+', '-', -2, '*', '-', 3, '+', 2, -2, -2, '+', '-', 2, -1,
         '-', 1],
        ['*', 2, '*', -2, '-', '+', '*', '*', '-', '*', 0, '+', 3, '-', '+', 1,
         -3, '*', '+', '-', -2, '*', '-', 3, '+', 2, -2, -2, '+', '-', 2, -1,
         '-', 1]),
    Ib002BuiltTrees(
        ['*', '*', '*', 3, '-', '+', '+', '+', '-', '-', '-', '+', '+', '+',
         '+', '+', '*', '*', '-', '+', '*', -1, -2, -2, 0, -2, 0, 4, 0, -3, 3,
         2, 1, 2, 1, 4], -12,
        [3, -1, -2, -2, 0, -2, 0, 4, 0, -3, 3, 2, 1, 2, 1, 4],
        ['*', 4, '*', 1, '*', '-', '+', 2, '+', 1, '+', 2, '-', '-', '-', '+',
         3, '+', -3, '+', 0, '+', 4, '+', 0, '*', -2, '*', 0, '-', '+', -2,
         '*', -2, -1, 3],
        ['*', 4, '*', 1, '*', '-', '+', 2, '+', 1, '+', 2, '-', '-', '-', '+',
         3, '+', -3, '+', 4, '*', -2, '*', 0, '-', '+', -2, '-', -2, 3]),
    Ib002BuiltTrees(
        ['+', '-', '*', '+', '-', '-', 4, '+', '+', '+', '-', '+', -2, '+',
         '+', -3, '*', '*', '+', '+', 3, '*', '-', '-', 3, 3, -1, 4, -1, 2, -1,
         0, -1, 4, 2], -194,
        [4, -2, -3, 3, 3, 3, -1, 4, -1, 2, -1, 0, -1, 4, 2],
        ['+', 2, '-', '*', 4, '+', '+', -1, '+', 0, '+', -1, '-', '+', '+', 2,
         '+', '*', -1, '*', 4, '+', -1, '+', '*', 3, '-', '-', 3, 3, -3, -2,
         '-', '-', 4],
        ['+', 2, '-', '*', 4, '+', '+', -1, '+', -1, '-', '+', '+', 2, '+',
         '-', '*', 4, '+', -1, '+', '*', 3, '-', '-', 3, 3, -3, -2, '-', '-',
         4]),
    Ib002BuiltTrees(
        ['*', -1, '+', '*', -1, '-', '+', '+', '-', '*', '+', 2, '-', '+', '*',
         '*', '*', '*', '*', 1, '*', '*', '-', '-', -3, 0, -3, 2, 0, 2, 4, 0,
         1, 2, -1, 1], 0,
        [-1, -1, 2, 1, -3, 0, -3, 2, 0, 2, 4, 0, 1, 2, -1, 1],
        ['*', '+', 1, '*', '-', '+', -1, '+', 2, '-', '*', 1, '+', '-', '+', 0,
         '*', 4, '*', 2, '*', 0, '*', 2, '*', '*', -3, '*', 0, '-', '-', -3, 1,
         2, -1, -1],
        ['-', '+', 1, '-', '-', '+', -1, '+', 2, '-', '*', 1, '+', '-', '*', 4,
         '*', 2, '*', 0, '*', 2, '*', '*', -3, '*', 0, '-', '-', -3, 1, 2]),
    Ib002BuiltTrees(
        ['-', '*', '-', -2, '-', '-', '*', '*', 0, '*', '*', '+', -1, '+', '*',
         -2, '*', '-', '-', '*', '*', '+', 3, '-', 0, 4, 2, '*', 0, -3, -2, -3,
         2, -3], 0, [-2, 0, -1, -2, 3, 0, 4, 2, 0, -3, -2, -3, 2, -3],
        ['-', '*', '-', '-', '*', -3, '*', '*', 2, '*', -3, '+', '+', -2, '*',
         '*', '*', -3, 0, '-', '-', '*', 2, '*', 4, '+', '-', 0, 3, -2, -1, 0,
         '-', -2],
        ['-', '*', '-', '-', '*', -3, '*', '*', 2, '*', -3, '+', '+', -2, '*',
         '*', '*', -3, 0, '-', '-', '*', 2, '*', 4, '+', '-', 0, 3, -2, -1, 0,
         '-', -2]),
    Ib002BuiltTrees(
        ['*', '-', 2, '+', '*', '*', '*', 4, '-', '*', '*', 2, '*', '-', '+',
         '-', 3, '*', -2, '*', 0, -3, 1, '+', 4, '-', '-', '*', '*', 4, 4, 1,
         2, -3, 1], -5762, [2, 4, 2, 3, -2, 0, -3, 1, 4, 4, 4, 1, 2, -3, 1],
        ['*', '+', 1, '*', -3, '*', 2, '*', '-', '*', '+', '-', '-', '*', 1,
         '*', 4, 4, 4, '*', '*', 1, '-', '+', '*', '*', -3, 0, -2, '-', 3, 2,
         4, '-', 2],
        ['*', '+', 1, '*', -3, '*', 2, '*', '-', '*', '+', '-', '-', '*', 1,
         '*', 4, 4, 4, '*', '*', 1, '-', '+', '*', '*', -3, 0, -2, '-', 3, 2,
         4, '-', 2]),
    Ib002BuiltTrees(
        ['+', '*', '*', '-', '*', '*', '-', 0, '-', '*', '-', '*', 4, '+', -3,
         '*', '-', '+', '*', 2, '-', '*', '+', '+', -2, 2, -2, 1, 2, 3, -2, 2,
         -1, 3, 1], 1, [0, 4, -3, 2, -2, 2, -2, 1, 2, 3, -2, 2, -1, 3, 1],
        ['+', 1, '*', 3, '*', -1, '-', '*', 2, '*', '-', '*', -2, '-', '*',
         '+', '*', 3, '-', '+', 2, '*', '-', '*', 1, '+', -2, '+', 2, -2, 2,
         -3, 4, '-', 0],
        ['+', 1, '*', 3, '-', '-', '*', 2, '*', '-', '*', -2, '-', '*', '+',
         '*', 3, '-', '+', 2, '*', '-', '*', 1, '+', -2, '+', 2, -2, 2, -3, 4,
         '-', 0]),
    Ib002BuiltTrees(
        ['-', '+', '+', 3, '-', '*', '*', '*', '+', '+', '*', '+', '*', '+',
         '*', '*', '*', '-', '+', 4, 2, 1, '+', '-', 1, 2, -1, 1, 3, 3, -2, -3,
         0, 2, -1, 0, 0], -3,
        [3, 4, 2, 1, 1, 2, -1, 1, 3, 3, -2, -3, 0, 2, -1, 0, 0],
        ['-', '+', 0, '+', '-', '*', 0, '*', -1, '*', 2, '+', 0, '+', -3, '*',
         -2, '+', 3, '*', 3, '+', 1, '*', -1, '*', '+', 2, '-', 1, '*', 1, '-',
         '+', 2, 4, 3],
        ['-', '+', '-', '*', 0, '-', '*', 2, '+', -3, '*', -2, '+', 3, '*', 3,
         '+', 1, '-', '*', '+', 2, '-', 1, '*', 1, '-', '+', 2, 4, 3]),
    Ib002BuiltTrees(
        ['+', '*', 3, '+', '+', '+', '-', '-', '+', '*', '*', '-', '*', '-',
         '+', -2, '*', '+', '-', 3, -2, '*', '+', '+', 1, 0, 0, -2, 1, 2, 0, 2,
         4, 1, -1, -1], 17,
        [3, -2, 3, -2, 1, 0, 0, -2, 1, 2, 0, 2, 4, 1, -1, -1],
        ['+', -1, '*', '+', -1, '+', 1, '+', 4, '-', '-', '+', 2, '*', 0, '*',
         2, '-', '*', 1, '-', '+', '*', '*', -2, '+', 0, '+', 0, 1, '+', -2,
         '-', 3, -2, 3],
        ['+', -1, '*', '+', -1, '+', 1, '+', 4, '-', '-', '+', 2, '*', 0, '*',
         2, '-', '*', 1, '-', '+', '*', '*', -2, 1, '+', -2, '-', 3, -2, 3]),
    Ib002BuiltTrees(
        ['+', '-', '+', '*', -2, '*', '-', '+', 2, '+', '+', '+', '-', '-',
         '+', '+', '*', '-', -3, '+', '-', '*', '-', 2, 2, -1, -2, 4, -2, -2,
         -1, -1, 2, 3], 17, [-2, 2, -3, 2, 2, -1, -2, 4, -2, -2, -1, -1, 2, 3],
        ['+', 3, '-', '+', 2, '*', '*', -1, '-', '+', '+', -1, '+', -2, '+',
         -2, '-', '-', '+', 4, '+', -2, '*', '+', -1, '-', '*', 2, '-', 2, '-',
         -3, 2, -2],
        ['+', 3, '-', '+', 2, '*', '-', '-', '+', '+', -1, '+', -2, '+', -2,
         '-', '-', '+', 4, '+', -2, '*', '+', -1, '-', '*', 2, '-', 2, '-', -3,
         2, -2]),
    Ib002BuiltTrees(
        ['+', '*', '*', '*', 3, '*', 2, 4, '+', 1, '*', '*', 3, -3, '-', '+',
         '*', '*', 3, '-', '*', '-', '+', '-', '+', '-', '*', 2, -1, -2, 3, 0,
         0, 0, 3, -1], 71,
        [3, 2, 4, 1, 3, -3, 3, 2, -1, -2, 3, 0, 0, 0, 3, -1],
        ['+', -1, '*', 3, '*', '+', '*', '-', '+', 0, '*', 0, '*', '-', '*', 0,
         '-', '+', 3, '-', '+', -2, '-', '*', -1, 2, 3, '*', -3, 3, 1, '*',
         '*', 4, 2, 3],
        ['+', -1, '*', 3, '*', '+', '*', '-', '*', 0, '*', '-', '*', 0, '-',
         '+', 3, '-', '+', -2, '-', '-', 2, 3, '*', -3, 3, 1, '*', '*', 4, 2,
         3]),
    Ib002BuiltTrees(
        ['+', '+', '-', '-', '+', '*', '*', '+', '*', 4, '*', 3, '-', -3, '*',
         1, '*', '*', '-', '+', 2, '*', '+', '-', -3, '-', 2, 1, 1, 2, 4, 3, 3,
         -1, -3], 359, [4, 3, -3, 1, 2, -3, 2, 1, 1, 2, 4, 3, 3, -1, -3],
        ['+', -3, '+', -1, '-', '-', '+', 3, '*', 3, '*', 4, '+', '*', '*', 2,
         '*', 1, '-', '+', '*', 1, '+', '-', 2, '-', -3, 2, 1, '*', '*', '-',
         -3, 3, 4],
        ['+', -3, '+', -1, '-', '-', '+', 3, '*', 3, '*', 4, '+', '*', '*', 2,
         '*', 1, '-', '+', '*', 1, '+', '-', 2, '-', -3, 2, 1, '*', '*', '-',
         -3, 3, 4]),
    Ib002BuiltTrees(
        ['+', '+', '-', '*', '-', '-', '*', '+', '-', '-', -2, '-', '+', -3,
         '+', '*', '+', '-', 3, '+', 4, '+', '+', '*', 1, -3, -3, -3, 1, -2, 2,
         2, 1, -3], -46, [-2, -3, 3, 4, 1, -3, -3, -3, 1, -2, 2, 2, 1, -3],
        ['+', -3, '+', 1, '-', '*', 2, '-', '-', '*', 2, '+', '-', '+', '+',
         -2, '*', 1, '+', '+', '+', -3, '+', -3, '*', -3, 1, 4, '-', 3, -3,
         '-', '-', -2],
        ['+', -3, '+', 1, '-', '*', 2, '-', '-', '*', 2, '+', '-', '+', '+',
         -2, '*', 1, '+', '+', '+', -3, '+', -3, '*', -3, 1, 4, '-', 3, -3,
         '-', '-', -2]),
    Ib002BuiltTrees(
        ['-', '-', '*', '+', '+', '+', '*', '*', '+', '-', '*', '*', '+', '-',
         '*', '*', '*', 4, 4, '*', '*', '-', -2, 1, 0, 3, 4, 2, 4, -1, 4, 2,
         -2, 1, 0, -1], 265,
        [4, 4, -2, 1, 0, 3, 4, 2, 4, -1, 4, 2, -2, 1, 0, -1],
        ['-', '-', '*', -1, '+', 0, '+', 1, '+', -2, '*', 2, '*', 4, '+', -1,
         '-', '*', 4, '*', 2, '+', 4, '-', '*', 3, '*', '*', 0, '*', 1, '-',
         -2, '*', 4, 4],
        ['-', '-', '-', '+', 1, '+', -2, '*', 2, '*', 4, '+', -1, '-', '*', 4,
         '*', 2, '+', 4, '-', '*', 3, '*', '*', 0, '*', 1, '-', -2, '*', 4,
         4]),
    Ib002BuiltTrees(
        ['+', '*', '*', '*', 4, '-', '-', '-', '-', -3, '+', '*', '+', '*',
         '*', '-', '*', '+', -3, '+', '*', '-', '-', 2, 0, -2, -2, -2, -3, 2,
         -2, 0, -3, -3], 4173,
        [4, -3, -3, 2, 0, -2, -2, -2, -3, 2, -2, 0, -3, -3],
        ['+', -3, '*', -3, '*', '+', 0, '*', -2, '+', 2, '*', -3, '*', -2, '-',
         '*', -2, '+', '+', -2, '*', 0, '-', '-', 2, -3, '*', '-', '-', '-',
         '-', -3, 4],
        ['+', -3, '*', -3, '*', '*', -2, '+', 2, '*', -3, '*', -2, '-', '*',
         -2, '+', '+', -2, '*', 0, '-', '-', 2, -3, '*', '-', '-', '-', '-',
         -3, 4]),
    Ib002BuiltTrees(
        ['*', -3, '*', '*', '+', '+', -2, '-', '-', '-', '*', '-', '*', 2, '+',
         '*', '+', 4, '-', '*', 0, 3, '*', '+', '-', 4, '+', -2, 4, 1, 2, 1, 4,
         -3, 2], -180, [-3, -2, 2, 4, 0, 3, 4, -2, 4, 1, 2, 1, 4, -3, 2],
        ['*', '*', 2, '*', -3, '+', 4, '+', '-', '-', '-', '*', 1, '-', '*',
         '+', 2, '*', '*', 1, '+', '+', 4, -2, '-', 4, '+', '-', '*', 3, 0, 4,
         2, -2, -3],
        ['*', '*', 2, '*', -3, '+', 4, '+', '-', '-', '-', '*', 1, '-', '*',
         '+', 2, '*', '*', 1, '+', '+', 4, -2, '-', 4, '+', '-', '*', 3, 0, 4,
         2, -2, -3]),
    Ib002BuiltTrees(
        ['+', '*', '*', 2, 2, '-', 3, '*', '-', '+', '+', 4, '*', 0, -2, '+',
         '+', '*', '*', '+', 0, '*', '-', '-', '+', 4, '-', '*', 4, 2, -2, -1,
         -3, 4, 4, 4], -156,
        [2, 2, 3, 4, 0, -2, 0, 4, 4, 2, -2, -1, -3, 4, 4, 4],
        ['+', '*', 4, '-', '+', '+', 4, '+', 4, '*', -3, '*', -1, '+', '*', -2,
         '-', '-', '+', '-', '*', 2, 4, 4, 0, '+', '*', -2, 0, 4, '*', '-', 3,
         '*', 2, 2],
        ['+', '*', 4, '-', '+', '+', 4, '+', 4, '*', -3, '-', '*', -2, '-',
         '-', '+', '-', '*', 2, 4, 4, '+', '*', -2, 0, 4, '*', '-', 3, '*', 2,
         2]),
    Ib002BuiltTrees(
        ['*', 0, '+', '-', '*', 1, '+', '-', '*', '-', '+', 2, '+', '*', '-',
         -2, '*', '+', '+', '+', -1, '-', '*', '*', 3, '+', 2, 2, -1, 3, 1, 0,
         3, 2, 3, 4], 0, [0, 1, 2, -2, -1, 3, 2, 2, -1, 3, 1, 0, 3, 2, 3, 4],
        ['*', '+', 4, '-', '*', '+', 3, '-', '*', 2, '-', '+', '+', 3, '*',
         '*', 0, '+', 1, '+', 3, '+', '-', '*', -1, '*', '+', 2, 2, 3, -1, '-',
         -2, 2, 1, 0],
        ['*', '+', 4, '-', '*', '+', 3, '-', '*', 2, '-', '+', '+', 3, '*',
         '*', 0, '+', 1, '+', 3, '+', '-', '-', '*', '+', 2, 2, 3, -1, '-', -2,
         2, 1, 0]),
    Ib002BuiltTrees(
        ['*', '*', '*', '*', '*', '*', '*', 2, '-', '+', '+', '*', '*', '-',
         '-', '-', '-', '*', '+', '*', '-', -2, 1, -1, -1, -1, -2, 2, 0, -3,
         -3, 4, 4, -2, -3], 0,
        [2, -2, 1, -1, -1, -1, -2, 2, 0, -3, -3, 4, 4, -2, -3],
        ['*', -3, '*', -2, '*', 4, '*', 4, '*', -3, '*', -3, '*', '-', '+', 0,
         '+', 2, '*', -2, '*', -1, '-', '-', '-', '-', '*', -1, '+', -1, '*',
         1, '-', -2, 2],
        ['*', -3, '*', -2, '*', 4, '*', 4, '*', -3, '*', -3, '*', '-', '+', 2,
         '*', -2, '-', '-', '-', '-', '-', '-', '+', -1, '*', 1, '-', -2, 2]),
    Ib002BuiltTrees(
        ['*', '+', '-', '*', '+', '*', 3, '-', '-', 3, '-', '-', '*', '+', -1,
         '-', '+', '*', '+', '*', '*', '*', '*', 4, -3, 0, 0, 1, -1, 3, -2, 4,
         0, 4, -2], -8, [3, 3, -1, 4, -3, 0, 0, 1, -1, 3, -2, 4, 0, 4, -2],
        ['*', -2, '+', 4, '-', '*', 0, '+', '-', '-', '*', 4, '+', '-', '+',
         -2, '*', 3, '+', -1, '*', 1, '*', 0, '*', 0, '*', -3, 4, -1, '*', '-',
         '-', 3, 3],
        ['*', -2, '+', 4, '-', '*', 0, '+', '-', '-', '*', 4, '+', '-', '+',
         -2, '*', 3, '+', -1, '*', 1, '*', 0, '*', 0, '*', -3, 4, -1, '*', '-',
         '-', 3, 3]),
    Ib002BuiltTrees(
        ['+', '-', '+', '+', -1, -2, '-', '+', '-', 0, '-', '+', '*', '-', 3,
         '+', '-', '*', '*', '+', 4, 0, 1, 1, '+', '+', '+', '+', -1, 4, -2, 3,
         -2, -1, -2], -4, [-1, -2, 0, 3, 4, 0, 1, 1, -1, 4, -2, 3, -2, -1, -2],
        ['+', -2, '-', '+', '-', '+', '-', '+', -1, '*', '+', '+', -2, '+', 3,
         '+', -2, '+', 4, -1, '-', '*', 1, '*', 1, '+', 0, 4, '-', 3, '-', 0,
         '+', -2, -1],
        ['+', -2, '-', '+', '-', '+', '-', '+', -1, '*', '+', '+', -2, '+', 3,
         '+', -2, '+', 4, -1, '-', '*', 1, '*', 1, 4, '-', 3, '-', 0, '+', -2,
         -1]),
    Ib002BuiltTrees(
        ['*', '+', 1, '+', '-', '+', -1, '+', '-', '+', '+', '*', '*', '*',
         '*', '-', -1, '*', '*', '-', '-', '*', '-', 2, 3, 3, 1, 0, -2, 1, -2,
         2, 4, -1, 4], -12, [1, -1, -1, 2, 3, 3, 1, 0, -2, 1, -2, 2, 4, -1, 4],
        ['*', 4, '+', '+', -1, '-', '+', '+', 4, '-', '+', 2, '+', -2, '*', 1,
         '*', -2, '*', 0, '*', '*', 1, '*', 3, '-', '-', '*', 3, '-', 2, '-',
         -1, -1, 1],
        ['*', 4, '+', '+', -1, '-', '+', '+', 4, '-', '+', 2, '+', -2, '*', 1,
         '*', -2, '*', 0, '*', '*', 1, '*', 3, '-', '-', '*', 3, '-', 2, '-',
         -1, -1, 1]),
    Ib002BuiltTrees(
        ['-', '+', '*', '+', '*', 3, '-', '*', '-', '*', '-', '+', '+', '-', 2,
         '*', '*', '+', 4, '+', '*', '*', '+', 4, 3, 4, 4, 2, -3, 0, 0, -2, 4,
         -1, -2, 3], -101,
        [3, 2, 4, 4, 3, 4, 4, 2, -3, 0, 0, -2, 4, -1, -2, 3],
        ['-', '+', 3, '*', -2, '+', -1, '*', '-', '*', 4, '-', '*', -2, '-',
         '+', 0, '+', '*', 0, '*', -3, '+', '+', 2, '*', 4, '*', 4, '+', 3, 4,
         4, '-', 2, 3],
        ['-', '+', 3, '*', -2, '+', -1, '*', '-', '*', 4, '-', '*', -2, '-',
         '+', '*', 0, '*', -3, '+', '+', 2, '*', 4, '*', 4, '+', 3, 4, 4, '-',
         2, 3]),
    Ib002BuiltTrees(
        ['*', -3, '-', '+', '+', '-', -2, 1, '-', '+', '*', '*', -3, '-', '+',
         -3, -3, '-', '+', '-', -1, 2, '*', '*', '*', '*', '+', '-', -2, -2, 1,
         3, 3, 1], -153, [-3, -2, 1, -3, -3, -3, -1, 2, -2, -2, 1, 3, 3, 1],
        ['*', '-', '+', '-', '+', '*', 1, '*', 3, '*', 3, '*', 1, '+', -2, '-',
         -2, '*', '-', '+', 2, '-', -1, '*', '-', '+', -3, -3, -3, '+', 1, '-',
         -2, -3],
        ['*', '-', '+', '-', '+', '*', 1, '*', 3, '*', 3, '*', 1, '+', -2, '-',
         -2, '*', '-', '+', 2, '-', -1, '*', '-', '+', -3, -3, -3, '+', 1, '-',
         -2, -3]),
    Ib002BuiltTrees(
        ['*', '-', -3, '*', '-', -3, '+', '*', '-', '-', 0, '-', -2, '+', '*',
         '-', -2, '+', '+', '*', '+', '*', '*', '*', '-', -2, 0, 4, 0, -2, 2,
         -3, 1, -1], -117, [-3, -3, 0, -2, -2, -2, 0, 4, 0, -2, 2, -3, 1, -1],
        ['*', '*', '+', '+', -1, '*', '+', 1, '+', -3, '*', 2, '+', -2, '*', 0,
         '*', 4, '*', 0, '-', -2, '-', -2, '*', '-', -2, '-', '-', 0, '-', -3,
         '-', -3],
        ['*', '*', '+', '+', -1, '*', '+', 1, '+', -3, '*', 2, '+', -2, '*', 0,
         '*', 4, '*', 0, '-', -2, '-', -2, '*', '-', -2, '-', '-', 0, '-', -3,
         '-', -3]),
    Ib002BuiltTrees(
        ['-', '+', '*', '*', 1, '-', '*', '-', '*', '+', '-', '*', '*', '-',
         '*', '+', '+', '-', '+', '+', '+', -3, 1, -3, -3, 0, 2, 2, 2, -2, 1,
         -3, -1, -3, -2], -709,
        [1, -3, 1, -3, -3, 0, 2, 2, 2, -2, 1, -3, -1, -3, -2],
        ['-', '+', -2, '*', -3, '*', '-', '*', -1, '-', '*', -3, '+', 1, '-',
         '*', -2, '*', 2, '-', '*', 2, '+', 2, '+', 0, '-', '+', -3, '+', -3,
         '+', 1, -3, 1],
        ['-', '+', -2, '*', -3, '*', '-', '-', '-', '*', -3, '+', 1, '-', '*',
         -2, '*', 2, '-', '*', 2, '+', 2, '-', '+', -3, '+', -3, '+', 1, -3,
         1]),
    Ib002BuiltTrees(
        ['+', '-', '+', '*', '+', '*', '+', '-', -3, '+', '-', '*', 4, '*',
         '*', '*', '+', '-', '-', '-', -3, -3, '+', '*', -1, -2, 2, -3, 2, -1,
         2, -2, -2, 2, 0], 2,
        [-3, 4, -3, -3, -1, -2, 2, -3, 2, -1, 2, -2, -2, 2, 0],
        ['+', 0, '-', '+', 2, '*', -2, '+', -2, '*', 2, '+', '+', -1, '-', '*',
         '*', 2, '*', -3, '*', '+', 2, '*', -2, -1, '+', -3, '-', '-', '-', -3,
         4, '-', -3],
        ['-', '+', 2, '*', -2, '+', -2, '*', 2, '+', '+', -1, '-', '*', '*', 2,
         '*', -3, '*', '+', 2, '-', -2, '+', -3, '-', '-', '-', -3, 4, '-',
         -3]),
    Ib002BuiltTrees(
        ['*', '-', '-', '+', 3, '-', -2, '+', '+', -1, 1, '*', '+', 0, '-',
         '+', 4, '*', '+', '*', '+', '+', '*', -2, '+', '+', '-', 1, 2, 2, 4,
         -3, 0, -1, 0, 0], 0,
        [3, -2, -1, 1, 0, 4, -2, 1, 2, 2, 4, -3, 0, -1, 0, 0],
        ['*', '+', '*', 0, '+', '-', '+', '*', 0, '+', -1, '*', 0, '+', -3,
         '+', 4, '*', '+', 2, '+', 2, '-', 1, -2, 4, 0, '+', 1, -1, '-', '-',
         '+', '-', -2, 3],
        ['*', '+', '*', 0, '-', '+', '*', 0, '+', -1, '*', 0, '+', -3, '+', 4,
         '*', '+', 2, '+', 2, '-', 1, -2, 4, '+', 1, -1, '-', '-', '+', '-',
         -2, 3]),
    Ib002BuiltTrees(
        ['*', '+', 3, '*', '*', '-', '*', '*', '-', '*', '+', '-', 4, '-', -1,
         '*', '*', -1, '*', '-', 2, 2, '+', '+', '+', '*', 1, 0, -1, -2, 2, 0,
         0, 3, -1, 3], 9,
        [3, 4, -1, -1, 2, 2, 1, 0, -1, -2, 2, 0, 0, 3, -1, 3],
        ['*', 3, '+', '*', -1, '*', 3, '-', '*', 0, '*', 0, '-', '*', '*', '+',
         2, '+', -2, '+', -1, '*', 0, 1, '*', '*', 2, '-', 2, -1, '+', '-', -1,
         '-', 4, 3],
        ['*', 3, '+', '-', '*', 3, '-', '*', 0, '*', 0, '-', '*', '*', '+', 2,
         '+', -2, '+', -1, '*', 0, 1, '-', '*', 2, '-', 2, '+', '-', -1, '-',
         4, 3]),
    Ib002BuiltTrees(
        ['+', '+', '*', '+', '*', '*', '*', 2, -1, '-', '-', '+', '-', '+',
         '+', '+', '-', 2, '-', '+', '+', '+', '*', 3, 0, -3, 2, -1, -3, 4, 3,
         -2, -3, 3, 1, 0], 16,
        [2, -1, 2, 3, 0, -3, 2, -1, -3, 4, 3, -2, -3, 3, 1, 0],
        ['+', 0, '+', 1, '*', 3, '+', -3, '*', -2, '*', '-', '-', '+', 3, '-',
         '+', 4, '+', -3, '+', '-', '+', -1, '+', 2, '+', -3, '*', 0, 3, '-',
         2, '*', -1, 2],
        ['+', 1, '*', 3, '+', -3, '*', -2, '*', '-', '-', '+', 3, '-', '+', 4,
         '+', -3, '+', '-', '+', -1, '+', 2, '+', -3, '*', 0, 3, '-', 2, '-',
         2]),
    Ib002BuiltTrees(
        ['*', '+', '*', '-', 0, '-', '+', '+', '+', 1, '-', '*', 3, '+', -3,
         '*', '*', '+', '-', '*', 4, '-', '+', '*', '*', 1, 0, 1, 2, 1, 1, 3,
         4, -2, -2, 3], -6,
        [0, 1, 3, -3, 4, 1, 0, 1, 2, 1, 1, 3, 4, -2, -2, 3],
        ['*', 3, '+', -2, '*', '-', '+', -2, '+', 4, '+', '-', '*', '+', '*',
         3, '*', 1, '+', 1, '-', '*', '-', '+', 2, '*', 1, '*', 0, 1, 4, -3, 3,
         1, '-', 0],
        ['*', 3, '+', -2, '*', '-', '+', -2, '+', 4, '+', '-', '*', '+', '*',
         3, '*', 1, '+', 1, '-', '*', '-', '+', 2, '*', 1, '*', 0, 1, 4, -3, 3,
         1, '-', 0]),
    Ib002BuiltTrees(
        ['+', '*', 1, '-', -1, '*', '+', '+', -3, 0, -3, '+', '+', '*', '+',
         '*', '-', '+', 3, '+', '*', -1, '-', '*', '-', '*', '-', 0, 3, 3, 3,
         0, 4, -2, -3, 4], 43,
        [1, -1, -3, 0, -3, 3, -1, 0, 3, 3, 3, 0, 4, -2, -3, 4],
        ['+', '*', '+', 4, '+', -3, '*', -2, '+', 4, '*', 0, '-', '+', '+', 3,
         '*', '-', '*', 3, '-', '*', 3, '-', 0, -1, 3, '+', -3, '+', 0, -3,
         '*', '-', -1, 1],
        ['+', '*', '+', 4, '+', -3, '*', -2, '+', 4, '*', 0, '-', '+', '+', 3,
         '-', '-', '*', 3, '-', '*', 3, '-', 0, 3, '+', -3, -3, '*', '-', -1,
         1]),
    Ib002BuiltTrees(
        ['-', '+', '*', '*', 2, '*', '*', '+', '*', '-', '+', '-', -3, '-',
         '+', '-', 4, '*', '*', '-', '*', -2, 0, '+', '*', 2, -1, 3, 0, 0, -2,
         -3, 2, -3, -1], 73,
        [2, -3, 4, -2, 0, 2, -1, 3, 0, 0, -2, -3, 2, -3, -1],
        ['-', '+', -1, '*', -3, '*', '*', 2, '*', -3, '+', -2, '*', 0, '-',
         '+', '-', '+', '*', 0, '*', '+', 3, '*', -1, 2, '-', '*', 0, -2, '-',
         4, '-', -3, 2],
        ['-', '+', -1, '*', -3, '*', '*', 2, '*', -3, '+', -2, '*', 0, '-',
         '+', '-', '+', '*', 0, '*', '+', 3, '-', 2, '-', '*', 0, -2, '-', 4,
         '-', -3, 2]),
    Ib002BuiltTrees(
        ['+', '+', 4, '+', 2, '-', '*', -2, '-', '-', '+', '*', '*', '+', '-',
         '+', '*', -3, '*', 3, '-', '*', '+', -1, 3, 1, -2, '*', '-', -1, 4, 1,
         2, -1, 3], -41, [4, 2, -2, -3, 3, -1, 3, 1, -2, -1, 4, 1, 2, -1, 3],
        ['+', 3, '+', '+', '-', '*', '-', '-', '+', -1, '*', 2, '*', 1, '+',
         '*', 4, '-', -1, '-', '+', -2, '*', '*', '-', '*', 1, '+', 3, -1, 3,
         -3, -2, 2, 4],
        ['+', 3, '+', '+', '-', '*', '-', '-', '+', -1, '*', 2, '*', 1, '+',
         '*', 4, '-', -1, '-', '+', -2, '*', '*', '-', '*', 1, '+', 3, -1, 3,
         -3, -2, 2, 4]),
    Ib002BuiltTrees(
        ['-', '+', '-', '-', '+', 0, '*', 3, '+', '*', 0, 2, '*', '*', '*',
         '-', '-', '+', 2, '*', '*', '+', '+', -2, '*', '*', -1, -3, -3, -1,
         -1, -2, -1, -1, -1, 3], -69,
        [0, 3, 0, 2, 2, -2, -1, -3, -3, -1, -1, -2, -1, -1, -1, 3],
        ['-', '+', 3, '-', '-', '+', '*', '+', '*', -1, '*', -1, '*', -1, '-',
         '-', '+', '*', -2, '*', -1, '+', -1, '+', '*', -3, '*', -3, -1, -2, 2,
         '*', 2, 0, 3, 0],
        ['-', '+', 3, '-', '-', '*', '+', '-', '-', '-', '-', '-', '+', '*',
         -2, '-', '+', -1, '+', '*', -3, '-', -3, -2, 2, '*', 2, 0, 3]),
    Ib002BuiltTrees(
        ['*', '*', '+', 0, -3, '*', -2, 0, '+', '-', '*', '+', '*', 2, '+',
         '+', -3, '-', -1, 2, '-', '-', '+', '+', 3, '-', '*', '+', -3, '+', 0,
         2, -3, -2, 1, -1], 0,
        [0, -3, -2, 0, 2, -3, -1, 2, 3, -3, 0, 2, -3, -2, 1, -1],
        ['*', '+', -1, '-', '*', 1, '+', '-', '-', '+', -2, '+', '-', '*', -3,
         '+', '+', 2, 0, -3, 3, '*', '+', 2, '+', '-', -1, -3, 2, '*', '*', 0,
         -2, '+', -3, 0],
        ['*', '+', -1, '-', '*', 1, '+', '-', '-', '+', -2, '+', '-', '*', -3,
         '+', 2, -3, 3, '*', '+', 2, '+', '-', -1, -3, 2, '*', '*', 0, -2,
         -3]),
    Ib002BuiltTrees(
        ['-', '-', '+', '+', '+', '+', '+', '-', '*', '*', -1, '+', '+', -2,
         -3, '*', 2, 0, '*', 0, '-', 0, '*', '+', '*', -3, '-', '+', -3, -3,
         -1, -2, 0, 4, 0, -3], 39,
        [-1, -2, -3, 2, 0, 0, 0, -3, -3, -3, -1, -2, 0, 4, 0, -3],
        ['-', '-', '+', -3, '+', 0, '+', 4, '+', 0, '+', '*', -2, '+', -1, '*',
         '-', '+', -3, -3, -3, '-', '*', '*', '-', 0, 0, '*', '+', '*', 0, 2,
         '+', -3, -2, -1],
        ['-', '-', '+', -3, '+', 4, '+', '*', -2, '+', -1, '*', '-', '+', -3,
         -3, -3, '-', '*', '*', '-', 0, 0, '-', '+', '*', 0, 2, '+', -3, -2]),
    Ib002BuiltTrees(
        ['+', '+', '*', '*', '*', '+', 1, '-', '*', '-', '*', '+', '+', '-',
         -2, '-', 4, 2, '*', '+', '*', '+', '*', '-', -2, -2, 3, 3, -2, 2, 1,
         1, 3, 4, 4, 3], 19,
        [1, -2, 4, 2, -2, -2, 3, 3, -2, 2, 1, 1, 3, 4, 4, 3],
        ['+', 3, '+', 4, '*', 4, '*', 3, '*', 1, '+', '-', '*', 1, '-', '*',
         '*', 2, '+', -2, '*', 3, '+', 3, '*', -2, '-', -2, '+', 2, '+', '-',
         4, '-', -2, 1],
        ['+', 3, '+', 4, '*', 4, '*', 3, '*', 1, '+', '-', '*', 1, '-', '*',
         '*', 2, '+', -2, '*', 3, '+', 3, '*', -2, '-', -2, '+', 2, '+', '-',
         4, '-', -2, 1]),
    Ib002BuiltTrees(
        ['+', '+', '+', '*', -1, '+', 3, '*', 4, '-', -3, '+', '-', '+', 4,
         '*', '+', 1, '+', '-', '+', '+', '*', '-', '*', '+', 3, 2, 4, 0, 2, 2,
         3, 1, 2, 3, 1], -13,
        [-1, 3, 4, -3, 4, 1, 3, 2, 4, 0, 2, 2, 3, 1, 2, 3, 1],
        ['+', 1, '+', 3, '+', '+', 2, '-', '+', '*', 1, '+', '+', 3, '-', '+',
         2, '+', 2, '*', 0, '-', '*', 4, '+', 2, 3, 1, 4, '*', '+', '*', '-',
         -3, 4, 3, -1],
        ['+', 1, '+', 3, '+', '+', 2, '-', '+', '*', 1, '+', '+', 3, '-', '+',
         2, '+', 2, '*', 0, '-', '*', 4, '+', 2, 3, 1, 4, '-', '+', '*', '-',
         -3, 4, 3]),
    Ib002BuiltTrees(
        ['*', '*', '-', '+', '+', '*', '+', '*', '-', '+', '*', 1, -3, '+',
         '+', '+', '+', '-', '*', '+', '*', 2, '-', 2, -3, -3, -2, 4, 4, 0, 4,
         -3, 1, 0, -3, 0, 2], 0,
        [1, -3, 2, 2, -3, -3, -2, 4, 4, 0, 4, -3, 1, 0, -3, 0, 2],
        ['*', 2, '*', 0, '-', '+', -3, '+', 0, '*', 1, '+', -3, '*', 4, '-',
         '+', '+', 0, '+', 4, '+', 4, '+', -2, '-', '*', -3, '+', -3, '*', '-',
         2, 2, '*', -3, 1],
        ['*', 2, '*', 0, '-', '+', -3, '*', 1, '+', -3, '*', 4, '-', '+', '+',
         4, '+', 4, '+', -2, '-', '*', -3, '+', -3, '*', '-', 2, 2, '*', -3,
         1]),
    Ib002BuiltTrees(
        ['+', '+', '*', 3, '+', '+', 1, '-', '+', '-', '+', '+', '+', '+', '-',
         '*', -1, '*', 4, '-', '-', 2, 3, '*', 4, '+', -1, -3, '+', 2, 2, -2,
         -1, 2, 1, -2], 2,
        [3, 1, -1, 4, 2, 3, 4, -1, -3, 2, 2, -2, -1, 2, 1, -2],
        ['+', -2, '+', 1, '*', '+', 2, '+', '-', '+', -1, '-', '+', -2, '+',
         '+', 2, 2, '+', '*', '+', -3, -1, 4, '+', 3, '-', '*', '*', '-', '-',
         2, 4, -1, 1, 3],
        ['+', -2, '+', 1, '*', '+', 2, '+', '-', '+', -1, '-', '+', -2, '+',
         '+', 2, 2, '+', '*', '+', -3, -1, 4, '+', 3, '-', '-', '*', '-', '-',
         2, 4, 1, 3]),
    Ib002BuiltTrees(
        ['-', '-', '+', '+', '-', -2, '+', -2, '*', '*', '+', '*', '-', '*',
         '+', '*', 4, '+', '+', '+', '-', '-', '+', -2, -1, 0, -3, -2, -3, -2,
         0, -2, 3, -2, 2], 14,
        [-2, -2, 4, -2, -1, 0, -3, -2, -3, -2, 0, -2, 3, -2, 2],
        ['-', '-', '+', 2, '+', '+', '*', -2, '*', 3, '+', -2, '*', 0, '-',
         '*', -2, '+', -3, '*', '+', -2, '+', -3, '+', 0, '-', '-', '+', -1,
         -2, 4, -2, '-', -2],
        ['-', '-', '+', 2, '+', '+', '*', -2, '*', 3, '+', -2, '*', 0, '-',
         '*', -2, '+', -3, '*', '+', -2, '+', -3, '-', '-', '+', -1, -2, 4, -2,
         '-', -2]),
    Ib002BuiltTrees(
        ['*', -3, '+', '*', -2, '-', '-', '*', '-', '+', '*', '+', '*', 2, 0,
         '*', '-', '*', '*', '-', -2, '+', -2, '*', '*', '-', 3, 2, -2, -1, 2,
         -3, -1, -1, -3], -717,
        [-3, -2, 2, 0, -2, -2, 3, 2, -2, -1, 2, -3, -1, -1, -3],
        ['*', '+', -3, '*', '-', '-', '*', -1, '-', '+', -1, '*', -3, '+', '*',
         2, '-', '*', -1, '*', '+', '*', -2, '*', 2, '-', 3, -2, '-', -2, '*',
         0, 2, -2, -3],
        ['*', '+', -3, '*', '-', '-', '-', '-', '+', -1, '*', -3, '+', '*', 2,
         '-', '-', '*', '+', '*', -2, '*', 2, '-', 3, -2, '-', -2, '*', 0, 2,
         -2, -3]),
    Ib002BuiltTrees(
        ['*', '-', -3, '+', '*', '*', '*', '+', '-', '*', '*', '*', '-', '-',
         '*', -3, 1, '*', '+', 3, 2, '+', '*', '*', -3, '-', 3, 4, 1, 1, -2,
         -3, 1, -2, -2, 0], -13356,
        [-3, -3, 1, 3, 2, -3, 3, 4, 1, 1, -2, -3, 1, -2, -2, 0],
        ['*', '+', 0, '*', -2, '*', -2, '*', 1, '+', -3, '-', '*', -2, '*', 1,
         '*', '*', '+', 1, '*', 4, '*', '-', 3, -3, '+', 2, 3, '-', '-', '*',
         1, -3, '-', -3],
        ['*', '*', -2, '*', -2, '*', 1, '+', -3, '-', '*', -2, '*', 1, '*',
         '*', '+', 1, '*', 4, '*', '-', 3, -3, '+', 2, 3, '-', '-', '*', 1, -3,
         '-', -3]),
    Ib002BuiltTrees(
        ['*', '*', -2, '+', -3, '+', '-', '-', '-', '*', '*', 2, '-', -1, '*',
         '*', '-', '*', '+', '+', '+', '*', '*', '*', 2, -2, 4, -3, 0, 3, -3,
         3, 3, 0, -2, -2], -20,
        [-2, -3, 2, -1, 2, -2, 4, -3, 0, 3, -3, 3, 3, 0, -2, -2],
        ['*', -2, '*', '+', '+', -2, '-', '-', '-', '*', '*', 0, '*', 3, '-',
         '*', 3, '+', -3, '+', 3, '+', 0, '*', -3, '*', 4, '*', -2, 2, '*',
         '-', -1, 2, -3, -2],
        ['*', -2, '*', '+', '+', -2, '-', '-', '-', '*', '*', 0, '*', 3, '-',
         '*', 3, '+', -3, '+', 3, '*', -3, '*', 4, '*', -2, 2, '*', '-', -1, 2,
         -3, -2]),
    Ib002BuiltTrees(
        ['-', '*', '*', -3, 1, '-', '*', -2, '+', '-', '+', -3, '*', '+', '+',
         '+', '+', '*', 0, '+', '*', '+', '+', '-', 3, '-', 4, -1, 3, -3, -3,
         0, 2, -3, -1, -2], -18,
        [-3, 1, -2, -3, 0, 3, 4, -1, 3, -3, -3, 0, 2, -3, -1, -2],
        ['-', '*', '-', '*', '+', -2, '-', '+', '*', -1, '+', -3, '+', 2, '+',
         0, '+', -3, '*', '+', -3, '*', 3, '+', -1, '+', '-', 4, '-', 3, 0, -3,
         -2, '*', 1, -3],
        ['-', '*', '-', '*', '+', -2, '-', '+', '-', '+', -3, '+', 2, '+', -3,
         '*', '+', -3, '*', 3, '+', -1, '+', '-', 4, '-', 3, 0, -3, -2, '*', 1,
         -3]),
    Ib002BuiltTrees(
        ['+', '+', '*', '-', '-', '*', '+', '+', '+', '+', '-', '*', '*', 4,
         '*', '*', '-', 3, '*', '+', 2, '+', 0, 4, 2, 2, '+', 1, 3, -1, -1, 3,
         1, -3, -1, -1, -1], 3460,
        [4, 3, 2, 0, 4, 2, 2, 1, 3, -1, -1, 3, 1, -3, -1, -1, -1],
        ['+', -1, '+', -1, '*', -1, '-', '-', '*', -3, '+', 1, '+', 3, '+', -1,
         '+', -1, '-', '*', '+', 3, 1, '*', '*', 2, '*', '*', 2, '+', '+', 4,
         0, 2, '-', 3, 4],
        ['+', -1, '+', -1, '-', '-', '-', '*', -3, '+', 1, '+', 3, '+', -1,
         '+', -1, '-', '*', '+', 3, 1, '*', '*', 2, '*', '*', 2, '+', 4, 2,
         '-', 3, 4]),
    Ib002BuiltTrees(
        ['+', '-', '-', '-', '*', -1, '+', '+', '-', '+', '*', -1, '*', '*',
         '+', '*', '*', '*', '*', 4, '+', '+', '*', 3, 0, 3, 4, -2, -1, -2, -3,
         -2, -3, 0, 3, 4, 1], -682,
        [-1, -1, 4, 3, 0, 3, 4, -2, -1, -2, -3, -2, -3, 0, 3, 4, 1],
        ['+', 1, '-', '-', '-', '*', '+', 4, '+', 3, '-', '+', 0, '*', '*', -3,
         '*', -2, '+', -3, '*', -2, '*', -1, '*', -2, '*', '+', 4, '+', 3, '*',
         0, 3, 4, -1, -1],
        ['+', 1, '-', '-', '-', '-', '+', 4, '+', 3, '-', '-', '*', -3, '*',
         -2, '+', -3, '*', -2, '-', '*', -2, '*', '+', 4, '+', 3, '*', 0, 3,
         4]),
    Ib002BuiltTrees(
        ['+', '*', '+', '*', '-', '+', 3, 1, '*', '*', -2, '*', '+', '+', '*',
         '+', '-', '*', '+', '+', '-', '-', -1, '*', 2, -1, -2, 4, 3, 4, 2, 1,
         4, -1, 1, -3, 3], 9120,
        [3, 1, -2, -1, 2, -1, -2, 4, 3, 4, 2, 1, 4, -1, 1, -3, 3],
        ['+', 3, '*', -3, '+', 1, '*', '*', -1, '*', '*', 4, '+', 1, '+', 2,
         '*', 4, '+', 3, '-', '*', 4, '+', -2, '+', '*', -1, 2, '-', '-', -1,
         -2, '-', '+', 1, 3],
        ['+', 3, '*', -3, '+', 1, '*', '-', '*', '*', 4, '+', 1, '+', 2, '*',
         4, '+', 3, '-', '*', 4, '+', -2, '+', '-', 2, '-', '-', -1, -2, '-',
         '+', 1, 3]),
    Ib002BuiltTrees(
        ['+', 2, '*', '+', '-', '*', '+', '*', '-', '+', '+', '*', '+', '*',
         -3, '+', '*', '-', '+', '+', 3, '-', '-', -2, -3, -3, -1, 0, -3, -1,
         1, -1, -1, 4, -3, 4], 1014,
        [2, -3, 3, -2, -3, -3, -1, 0, -3, -1, 1, -1, -1, 4, -3, 4],
        ['+', '*', 4, '+', -3, '-', '*', 4, '+', -1, '*', -1, '-', '+', 1, '+',
         -1, '*', -3, '+', 0, '*', '+', -1, '*', -3, '-', '+', -3, '+', '-',
         '-', -2, 3, -3, 2],
        ['+', '*', 4, '+', -3, '-', '*', 4, '+', -1, '-', '-', '+', 1, '+', -1,
         '*', -3, '*', '+', -1, '*', -3, '-', '+', -3, '+', '-', '-', -2, 3,
         -3, 2]),
    Ib002BuiltTrees(
        ['+', '*', '*', '*', 1, '-', 0, 4, '*', '-', '+', '+', '+', '+', -2, 3,
         '-', -2, '*', '*', 3, -1, -1, 4, '+', '*', '+', '-', '*', '*', -2, 0,
         0, 3, 3, -1, -2], -2,
        [1, 0, 4, -2, 3, -2, 3, -1, -1, 4, -2, 0, 0, 3, 3, -1, -2],
        ['+', -2, '*', '*', '+', -1, '*', 3, '+', 3, '-', '*', 0, '*', 0, -2,
         '-', '+', 4, '+', '*', -1, '*', -1, 3, '+', '-', -2, '+', 3, -2, '*',
         4, '*', '-', 0, 1],
        ['+', -2, '*', '*', '+', -1, '*', 3, '+', 3, '-', '*', 0, '*', 0, -2,
         '-', '+', 4, '+', '-', '-', 3, '+', '-', -2, '+', 3, -2, '*', 4, '*',
         '-', 0, 1]),
    Ib002BuiltTrees(
        ['*', '-', 4, '*', '*', '+', '*', -1, -1, '*', '-', '-', -1, '+', '*',
         3, 3, '+', '+', '*', 1, '*', '-', '+', '*', '+', '*', -1, 4, -2, -2,
         4, 3, 3, -2, 1, 4], -624,
        [4, -1, -1, -1, 3, 3, 1, -1, 4, -2, -2, 4, 3, 3, -2, 1, 4],
        ['*', '*', 4, '*', 1, '+', '*', '+', '+', -2, '+', 3, '*', '*', 3, '-',
         '+', 4, '*', -2, '+', -2, '*', 4, -1, 1, '*', 3, 3, '-', '-', -1, '*',
         -1, -1, '-', 4],
        ['*', '*', 4, '*', 1, '+', '*', '+', '+', -2, '+', 3, '*', '*', 3, '-',
         '+', 4, '*', -2, '+', -2, '-', 4, 1, '*', 3, 3, '-', '-', -1, '-', -1,
         '-', 4]),
    Ib002BuiltTrees(
        ['*', '-', '+', '*', '+', '+', '-', '+', '+', -1, '+', '*', 2, '*',
         '*', '+', '*', '+', '+', 3, '+', '*', 2, '*', -1, 4, 2, 4, 0, 1, 0,
         -2, 2, 4, 1, 2, 1, 0, 1], 2,
        [-1, 2, 3, 2, -1, 4, 2, 4, 0, 1, 0, -2, 2, 4, 1, 2, 1, 0, 1],
        ['*', 1, '-', '+', 0, '*', 1, '+', 2, '+', 1, '-', '+', 4, '+', '+', 2,
         '*', '*', -2, '*', 0, '+', 1, '*', 0, '+', 4, '+', '+', 2, '*', '*',
         4, -1, 2, 3, 2, -1],
        ['*', 1, '-', '*', 1, '+', 2, '+', 1, '-', '+', 4, '+', '+', 2, '*',
         '*', -2, '*', 0, '+', 1, '*', 0, '+', 4, '+', '+', 2, '*', '-', 4, 2,
         3, 2, -1]),
    Ib002BuiltTrees(
        ['-', '+', '-', 2, '*', '+', '-', '-', '-', '+', '+', '+', '+', '+',
         '*', '*', -2, '+', -1, '+', 3, '*', '*', '+', -2, -2, 0, -2, -2, -2,
         -2, -3, -1, 1, 4, -1], 5,
        [2, -2, -1, 3, -2, -2, 0, -2, -2, -2, -2, -3, -1, 1, 4, -1],
        ['-', '+', '*', -1, '+', 4, '-', '-', '-', '+', 1, '+', -1, '+', -3,
         '+', -2, '+', -2, '*', -2, '*', '+', '+', '*', -2, '*', 0, '+', -2,
         -2, 3, -1, -2, '-', 2],
        ['-', '+', '-', '+', 4, '-', '-', '-', '+', 1, '+', -1, '+', -3, '+',
         -2, '+', -2, '*', -2, '*', '+', '+', '*', -2, '*', 0, '+', -2, -2, 3,
         -1, -2, '-', 2]),
    Ib002BuiltTrees(
        ['+', '+', '*', '+', 3, '+', '+', '+', '*', '+', '*', '+', '+', '-',
         '+', '+', '-', '-', '-', -1, 3, '+', -3, '*', -3, -3, -3, -2, -1, -1,
         3, -3, 3, 3, 2, 0, -1], 95,
        [3, -1, 3, -3, -3, -3, -3, -2, -1, -1, 3, -3, 3, 3, 2, 0, -1],
        ['+', -1, '+', 0, '*', 2, '+', '+', 3, '+', 3, '+', -3, '*', 3, '+',
         -1, '*', -1, '+', -2, '+', -3, '-', '+', '+', '*', -3, -3, -3, '+', 3,
         '-', '-', '-', -1, 3],
        ['+', -1, '*', 2, '+', '+', 3, '+', 3, '+', -3, '*', 3, '+', -1, '-',
         '+', -2, '+', -3, '-', '+', '+', '*', -3, -3, -3, '+', 3, '-', '-',
         '-', -1, 3]),
    Ib002BuiltTrees(
        ['+', '*', -3, '+', 0, '+', 2, '+', '-', '+', '-', '*', '*', '-', 3,
         '*', '+', 3, '+', -1, '+', '+', '+', -1, '*', 3, 4, '*', 1, '*', 3,
         -3, -3, 4, -2, 2, 1, -1], -76,
        [-3, 0, 2, 3, 3, -1, -1, 3, 4, 1, 3, -3, -3, 4, -2, 2, 1, -1],
        ['+', -1, '*', '+', '+', '+', 1, '-', '+', 2, '-', '*', -2, '*', '*',
         4, '+', '+', '+', -3, '+', '*', '*', -3, 3, 1, '+', '*', 4, 3, -1, -1,
         3, '-', 3, 2, 0, -3],
        ['+', -1, '*', '+', '+', 1, '-', '+', 2, '-', '*', -2, '*', '*', 4,
         '+', '+', '+', -3, '+', '*', '*', -3, 3, 1, '+', '*', 4, 3, -1, -1, 3,
         '-', 3, 2, -3]),
    Ib002BuiltTrees(
        ['+', '+', '*', '+', '+', '*', -3, -3, '*', '-', '*', 3, 3, '*', 2, -3,
         '*', -3, -3, '*', '-', -2, '+', '*', '+', '*', '-', '+', '+', 0, -1,
         3, 4, -2, 0, 0, -2, -1], -3,
        [-3, -3, 3, 3, 2, -3, -3, -3, -2, 0, -1, 3, 4, -2, 0, 0, -2, -1],
        ['+', -1, '+', -2, '*', '*', '+', 0, '*', 0, '+', -2, '*', 4, '-', '+',
         3, '+', -1, 0, '-', -2, '+', '*', -3, -3, '+', '*', '*', -3, 2, '-',
         '*', 3, 3, '*', -3, -3],
        ['+', -1, '+', -2, '*', '*', '*', 0, '+', -2, '*', 4, '-', '+', 3, -1,
         '-', -2, '+', '*', -3, -3, '+', '*', '*', -3, 2, '-', '*', 3, 3, '*',
         -3, -3]),
    Ib002BuiltTrees(
        ['*', '*', '-', '*', '*', '-', '+', '+', '*', '+', 1, '*', 2, -2, '+',
         -3, 4, '*', '*', '+', '*', -1, '*', '+', '+', '*', -1, -1, -2, -2, 1,
         -2, 1, 4, 1, 3, -3, -2, -1], -36,
        [1, 2, -2, -3, 4, -1, -1, -1, -2, -2, 1, -2, 1, 4, 1, 3, -3, -2, -1],
        ['*', -1, '*', -2, '-', '*', -3, '*', 3, '-', '+', 1, '+', '*', 4, '*',
         1, '+', -2, '*', '*', 1, '+', -2, '+', -2, '*', -1, -1, -1, '*', '+',
         4, -3, '+', '*', -2, 2, 1],
        ['-', '*', -2, '-', '*', -3, '*', 3, '-', '+', 1, '+', '*', 4, '*', 1,
         '+', -2, '-', '*', 1, '+', -2, '+', -2, '-', -1, '*', '+', 4, -3, '+',
         '*', -2, 2, 1]),
]


def ib002_t_eval_atree():
    print("1. test 'eval_atree':")

    fail_counter = 0

    for scenario in testing_dataset:
        tree = ib002_deserialise_tree(scenario.tree)
        if eval_atree(tree) != scenario.result:
            print("\nNOK, vas vysledek: {}, ocekavany vysledek: {}"
                  .format(eval_atree(tree), scenario.result))
            make_graph(tree, "Er_eval_{}.dot".format(fail_counter))
            print("Testovany strom ulozen v souboru Er_eval_{}.dot"
                  .format(fail_counter))

            fail_counter += 1
            if fail_counter >= MaxErrCount:
                print("\nVypsano pouze prvnich MaxErrCount={} chyb,\
 dalsi testy nespusteny.".format(MaxErrCount))
                break

    if fail_counter == 0:
        print("OK")


def ib002_t_constants_to_array():
    print("\n2. test 'constants_to_array':")

    fail_counter = 0

    for scenario in testing_dataset:
        expected = scenario.constants
        tree = ib002_deserialise_tree(scenario.tree)
        out = constants_to_array(tree)
        if out != expected:
            print("\nNOK, vas vysledek: {}, ocekavany vysledek: {}"
                  .format(out, expected))
            make_graph(tree, "Er_constants_{}.dot".format(fail_counter))
            print("Testovany strom ulozen v souboru Er_constants_{}.dot"
                  .format(fail_counter))

            fail_counter += 1
            if fail_counter >= MaxErrCount:
                print("\nVypsano pouze prvnich MaxErrCount={} chyb,\
 dalsi testy nespusteny.".format(MaxErrCount))
                break

    if fail_counter == 0:
        print("OK")


def ib002_t_build_atree():
    print("\n3. test 'build_atree':")

    fail_counter = 0

    for scenario in testing_dataset:
        array = list(scenario.array)
        tree = build_atree(array)
        if not ib002_trees_equality(tree,
                                    ib002_deserialise_tree(scenario.tree)):
            print("\nNOK, vybudovany strom se lisi od ocekavaneho.")
            print("Vstupni pole: {}".format(str(scenario.array)))
            make_graph(tree, "Er_build_{}_yours.dot".format(fail_counter))
            make_graph(ib002_deserialise_tree(scenario.tree),
                       "Er_build_{}_expected.dot".format(fail_counter))
            print(("Vami vytvoreny strom je ulozen v souboru "
                   "Er_build_{}_yours.dot,").format(fail_counter))
            print(("ocekavany strom je ulozen v souboru "
                   "Er_build_{}_expected.dot").format(fail_counter))

            fail_counter += 1
            if fail_counter >= MaxErrCount:
                print("\nVypsano pouze prvnich MaxErrCount={} chyb,\
 dalsi testy nespusteny.".format(MaxErrCount))
                break

    if fail_counter == 0:
        print("OK")


def ib002_t_simplify_atree():
    print("\n4. test 'simplify_atree':")

    fail_counter = 0

    for scenario in testing_dataset:
        tree = ib002_deserialise_tree(scenario.tree)
        simplify_atree(tree)
        if not ib002_trees_equality(tree,
                                    ib002_deserialise_tree(
                                        scenario.simplified)):
            print("\nNOK, vybudovany strom se lisi od ocekavaneho.")
            make_graph(ib002_deserialise_tree(scenario.tree),
                       "Er_simplify_{}_input.dot".format(fail_counter))
            make_graph(tree, "Er_simplify_{}_yours.dot".format(fail_counter))
            make_graph(ib002_deserialise_tree(scenario.simplified),
                       "Er_simplify_{}_expected.dot".format(fail_counter))
            print(("Vami vytvoreny strom je ulozen v souboru "
                   "Er_simplify_{}_yours.dot,").format(fail_counter))
            print(("ocekavany strom je ulozen v souboru "
                   "Er_simplify_{}_expected.dot").format(fail_counter))
            print(("vstupni strom je ulozen v souboru "
                   "Er_simplify_{}_input.dot").format(fail_counter))

            fail_counter += 1
            if fail_counter >= MaxErrCount:
                print("\nVypsano pouze prvnich MaxErrCount={} chyb,\
 dalsi testy nespusteny.".format(MaxErrCount))
                break

    if fail_counter == 0:
        print("OK")


# Hlavni funkce volana automaticky po spusteni programu.
# Pokud chcete krome dodanych testu spustit vlastni testy, dopiste je sem.
# Odevzdavejte reseni s puvodni verzi teto funkce.

if __name__ == '__main__':
    ib002_t_eval_atree()
    ib002_t_constants_to_array()
    ib002_t_build_atree()
    ib002_t_simplify_atree()
